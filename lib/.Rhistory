library(stringr)
data.lib="/Users/ouminamikun/Documents/Columbia/Spring 2017/ADS/Spr2017-proj4-team-14/data/nameset"
data.files=list.files(path=data.lib, "*.txt")
data.files
## remove "*.txt"
query.list=substring(data.files,
1, nchar(data.files)-4)
query.list
## add a space
query.list=paste(substring(query.list, 1, 1),
" ",
substring(query.list,
2, nchar(query.list)),
sep=""
)
query.list
f.line.proc=function(lin, nam.query="."){
# remove unwanted characters
char_notallowed <- "\\@#$%^&?" # characters to be removed
lin.str=str_replace(lin, char_notallowed, "")
# get author id
lin.str=strsplit(lin.str, "_")[[1]]
author_id=as.numeric(lin.str[1])
# get paper id
lin.str=lin.str[2]
paper_id=strsplit(lin.str, " ")[[1]][1]
lin.str=substring(lin.str, nchar(paper_id)+1, nchar(lin.str))
paper_id=as.numeric(paper_id)
# get coauthor list
lin.str=strsplit(lin.str, "<>")[[1]]
coauthor_list=strsplit(lin.str[1], ";")[[1]]
#print(lin.str)
for(j in 1:length(coauthor_list)){
if(nchar(coauthor_list[j])>0){
nam = strsplit(coauthor_list[j], " ")[[1]]
if(nchar(nam[1])>0){
first.ini=substring(nam[1], 1, 1)
}else{
first.ini=substring(nam[2], 1, 1)
}
}
last.name=nam[length(nam)]
nam.str = paste(first.ini, last.name)
coauthor_list[j]=nam.str
}
match_ind = charmatch(nam.query, coauthor_list, nomatch=-1)
#print(nam.query)
#print(coauthor_list)
#print(match_ind)
if(match_ind>0){
coauthor_list=coauthor_list[-match_ind]
}
paper_title=lin.str[2]
journal_name=lin.str[3]
list(author_id,
paper_id,
coauthor_list,
paper_title,
journal_name)
}
data_list=list(1:length(data.files))
for(i in 1:length(data.files)){
## Step 0 scan in one line at a time.
dat=as.list(readLines(paste(data.lib, data.files[i], sep="/")))
data_list[[i]]=lapply(dat, f.line.proc, nam.query=query.list[i])
}
M6 <- function(d){
n <- length(d)
## P Matrix
P <- matrix( rep(0, n*n), nrow = n)
diag(P) <- rep(1,n)
## Coauthor List
co <- NULL
for(i in 1:n){
co <- c(co, d[[i]][[3]])
}
co <- unique(co)
## AP Matrix
m <- length(co)
AP <- matrix(rep(0,n*m), nrow = n)
for(i in 1:m){
for( j in 1:n){
if(co[i] %in% d[[j]][[3]]){
AP[j,i] <- 1
}
}
}
## AA Matrix
AA <- matrix(rep(0, m*m), nrow = m)
for(i in 1:m){
for(j in 1:m){
for(k in 1:n){
if(co[i] %in% d[[k]][[3]] & co[j] %in% d[[k]][[3]]){
AA[i,j] <- 1
break
}
}
}
}
## M Matrix
M1 <- cbind(P, AP)
M2 <- cbind(t(AP), AA)
M <- rbind(M1,M2)
return(M)
}
M6(data_list[[1]])
data_list[[8]]
data_list[[8]][[1]]
length(data_list[[1]])
length(data_list[[8]])
length(data_list[[8]][1])
length(data_list[[8]][[1]])
data_list[[8]][[925]]
###################################### J Smith #################################
JSmith <- data.frame(scan("/Users/ouminamikun/Documents/Columbia/Spring 2017/ADS/Project 4/nameset/JSmith.txt",
what = list(coauthor ="", paper = "", publication =""),
sep = ">", quiet = T),stringsAsFactors = F)
JSmith$authors <- gsub("<","",sub("^.*?\\s","", JSmith$coauthor))
JSmith$clusterid <- sub("_.*","",JSmith$coauthor)
View(JSmith)
data_list[[8]][[1]]
data_list[[8]][[2]]
data_list[[8]][[3]]
data_list[[8]][[4]]
data_list[[8]][[225]]
data_list[[8]][100]
length(data_list[[1]])
length(data_list[[2]])
length(data_list[[3]])
length(data_list[[8]])/5
data_list[[8]][[1]]
data_list[[8]][[977]]
JSmith_features <- matrix(0, 225, 255)
JSmith_features[,1] <- JSmith$clusterid
for(i in 1:225){
j_ind <- matrix(0, nrow =length(authors[[i]]), ncol = 254)
for(j in 1:length(authors[[i]])){
j_ind[j,] <- authors[[i]][j] == freq_authors$authors
}
JSmith_features[,-1][i,] <- as.numeric(colSums(j_ind))
}
authors <- strsplit(JSmith$authors, ";")
authors
for(i in 1:225){
j_ind <- matrix(0, nrow =length(authors[[i]]), ncol = 254)
for(j in 1:length(authors[[i]])){
j_ind[j,] <- authors[[i]][j] == freq_authors$authors
}
JSmith_features[,-1][i,] <- as.numeric(colSums(j_ind))
}
freq_authors <- c(authors[[1]],authors[[2]])
for(i in 3:length(authors)){
freq_authors<- c(freq_authors, authors[[i]])
}
freq_authors <- as.data.frame(sort(table(freq_authors)))
colnames( freq_authors) <- c("authors", "frequencies")
for(i in 1:225){
j_ind <- matrix(0, nrow =length(authors[[i]]), ncol = 254)
for(j in 1:length(authors[[i]])){
j_ind[j,] <- authors[[i]][j] == freq_authors$authors
}
JSmith_features[,-1][i,] <- as.numeric(colSums(j_ind))
}
nb_train <- function(train_x, train_y){
d <- ncol(train_x)
id <- unique(train_y)
k <- length(id)
P_No <- NA
P_Co <- NA
co_times <- matrix(NA, nrow = k, ncol = d)
for(i in 1:k){
##
row_sum <- rowSums(train_x)
index <- train_y == id[i]
row_sum_id <- row_sum[index]
No_ind <- row_sum_id == 1
P_No[i] <- mean(No_ind)
P_Co[i] <- 1 - P_No[i]
##
train_x_id <- train_x[index,]
dimension <- ifelse(is.matrix(train_x_id), 2, 1)
if(dimension == 1){
co_times[i,] <- train_x_id
}
else if(dimension == 2){
co_times[i,] <- colSums(train_x_id)
}
}
co_times_omt<- co_times[, -d]
seen_times <- apply(co_times_omt, 1, function(x){sum(x[x >= 2])})
total_times <- rowSums(co_times_omt)
P_Seen_Co <- seen_times / total_times
P_Unseen_Co <- 1 - P_Seen_Co
##
P_A1k_Seen_Co <- prop.table(co_times_omt, 1)
P_A1k_Unseen_Co <- 1 / (d - rowSums(co_times_omt))
##
prop <- prop.table(co_times, 2)
Prior <- prop[,d]
return(list(Prior = Prior,
P_No = P_No,
P_Co = P_Co,
P_Seen_Co = P_Seen_Co,
P_Unseen_Co = P_Unseen_Co,
P_A1k_Seen_Co = P_A1k_Seen_Co,
P_A1k_Unseen_Co = P_A1k_Unseen_Co,
mm = co_times_omt))
}
class(JSmith_features) <- "numeric"
train_x <- JSmith_features[,-1]
train_y <- JSmith_features[,1]
model <- nb_train(train_x = train_x, train_y = train_y)
nb_test <- function(model, test_data, n_id){
n <- dim(test_data)[1]
d <- dim(test_data)[2]
test_data_omt <- test_data[,-d]
posterior <- matrix(NA, nrow = n, ncol = n_id)
P_A1_Xi <- matrix(NA, nrow = n, ncol = n_id)
K <- rowSums(test_data)
for(i in 1:n){
K <- K[i]
for(j in 1:n_id){
if(K == 1){
posterior[i,j] <- model$P_No[j]
}
else if(K >= 2){
name_ind <- test_data_omt[i,] == 1
P_A1_Xi[i,j] <- prod(model$P_A1k_Seen_Co[j, name_ind] * model$P_Seen_Co[j] * model$P_Co[j] +   rep(model$P_A1k_Unseen_Co[j], sum(name_ind)) * model$P_Unseen_Co[j] * model$P_Co[j])
posterior[i,j] <- prod(P_A1_Xi[i,j] * model$Prior[j])
}
}
class[i] <- which.max(posterior[i,])
}
return(prediction = class)
}
nb_test(model = model, test_data = train_x, n_id = 9)
m <- matrix(1:4, 2)
m
data_list[[8]][[1]]
data_list[[8]][[1]][[3]]
View(train_x)
nb_train <- function(train_x, train_y){
d <- ncol(train_x)
id <- unique(train_y)
k <- length(id)
P_No <- NA
P_Co <- NA
co_times <- matrix(NA, nrow = k, ncol = d)
for(i in 1:k){
##
row_sum <- rowSums(train_x)
index <- train_y == id[i]
row_sum_id <- row_sum[index]
No_ind <- row_sum_id == 1
P_No[i] <- mean(No_ind)
P_Co[i] <- 1 - P_No[i]
##
train_x_id <- train_x[index,]
dimension <- ifelse(is.matrix(train_x_id), 2, 1)
if(dimension == 1){
co_times[i,] <- train_x_id
}
else if(dimension == 2){
co_times[i,] <- colSums(train_x_id)
}
}
co_times_omt<- co_times[, -d]
seen_times <- apply(co_times_omt, 1, function(x){sum(x[x >= 2])})
total_times <- rowSums(co_times_omt)
P_Seen_Co <- seen_times / total_times
P_Unseen_Co <- 1 - P_Seen_Co
##
P_A1k_Seen_Co <- prop.table(co_times_omt, 1)
P_A1k_Unseen_Co <- 1 / (d - rowSums(co_times_omt))
##
prop <- prop.table(co_times, 2)
Prior <- prop[,d]
return(list(Prior = Prior,
P_No = P_No,
P_Co = P_Co,
P_Seen_Co = P_Seen_Co,
P_Unseen_Co = P_Unseen_Co,
P_A1k_Seen_Co = P_A1k_Seen_Co,
P_A1k_Unseen_Co = P_A1k_Unseen_Co,
mm = co_times_omt))
}
class(JSmith_features) <- "numeric"
train_x <- JSmith_features[,-1]
train_y <- JSmith_features[,1]
model <- nb_train(train_x = train_x, train_y = train_y)
model$mm
m <- model$mm
View(m)
load("/Users/ouminamikun/Documents/Columbia/Spring 2017/ADS/Spr2017-proj4-team-14/output/M.RData")
M[[8]]
dim(data_list[[8]])
length(data_list[[8]])
M[[8]][927,]
dim(M[[8]])
M[[8]][1:927, 928:1653]
f <- M[[8]][1:927, 928:1653]
View(f)
View(JSmith_features)
f[,1] <- JSmith[,1]
View(f)
sum(rowSums(f) == 0)
927+927
View(f)
data_list[[8]][[1]]
data_list[[8]][[1]][1]
label <- function(data_list, num){
nameset <- data_list[[num]]
n <- length(nameset)
for(i in 1:n){
label[i] <- nameset[[i]][1]
}
return(label)
}
label(data_list = data_list, num = 8)
data_list[[8]][1]
data_list[[8]][[1]][1]
num <- 8
data_list[[num]]
length(data_list[[8]])
label(data_list, num = 8)
label <- function(data_list, num){
nameset <- data_list[[num]]
n <- length(nameset)
label <- NA
for(i in 1:n){
label[i] <- nameset[[i]][1]
}
return(label)
}
label(data_list, num = 8)
l <- label(data_list, num = 8)
label <- function(data_list, num){
nameset <- data_list[[num]]
n <- length(nameset)
label <- NA
for(i in 1:n){
label[i] <- nameset[[i]][1]
}
label <- as.vector(label)
return(label)
}
l <- label(data_list, num = 8)
l
label <- function(data_list, num){
nameset <- data_list[[num]]
n <- length(nameset)
label <- NA
for(i in 1:n){
label[i] <- nameset[[i]][1]
}
return(as.vector(label))
}
l <- label(data_list, num = 8)
label <- function(data_list, num){
nameset <- data_list[[num]]
n <- length(nameset)
label <- NA
for(i in 1:n){
label[i] <- nameset[[i]][1]
}
return(unlist(label))
}
l <- label(data_list, num = 8)
