}
it_train <- itoken(paper,
preprocessor = tolower,
tokenizer = word_tokenizer,
progressbar = FALSE)
vocab <- create_vocabulary(it_train, stopwords = c("a", "an", "the", "in", "on",
"at", "of", "above", "under"))
vectorizer <- vocab_vectorizer(vocab)
dtm_train <- create_dtm(it_train, vectorizer)
dim(dtm_train)
tfidf <- TfIdf$new()
train.data <- as.matrix(fit_transform(dtm_train, tfidf)) #### Get train data features.
data.train <- train.data
t <- 3
label <- vector("numeric", length = n) #### Save true assignments.
for(i in 1:n){
label[i] <- d[[i]][[1]]
}
k <- length(unique(label)) #### Number of clusters.
#### Train
train_label <- Train(train.data, M, k, t)
#### Result
matching_matrix_hclust <- matching_matrix(label,train_label)
performance_hclust <- performance_statistics(label,train_label)
require("pacman")
pacman::p_load(text2vec, dplyr, qlcMatrix, kernlab, knitr)
source("../lib/M.R")
load("../output/CleanData.RData")
load("../output/M.RData")
source("../lib/C6_train.R")
source('~/Dropbox/Project4_WhoIsWho/lib/evaluation_measures.R')
source('../lib/evaluation_measures.R')
d <- data_list[[10]]
M <- M.Matrix[[10]]
n <- length(d) #### Number of publications
paper <- vector("character", length = n)
require("pacman")
pacman::p_load(text2vec, dplyr, qlcMatrix, kernlab, knitr)
source("../lib/M.R")
load("../output/CleanData.RData")
load("../output/M.RData")
source("../lib/C6_train.R")
source('../lib/evaluation_measures.R')
#### Get Features
d <- data_list[[10]]
M <- M.Matrix[[10]]
n <- length(d) #### Number of publications
paper <- vector("character", length = n)
for(i in 1:n){
paper[i] <- d[[i]][[5]]
}
it_train <- itoken(paper,
preprocessor = tolower,
tokenizer = word_tokenizer,
progressbar = FALSE)
vocab <- create_vocabulary(it_train, stopwords = c("a", "an", "the", "in", "on",
"at", "of", "above", "under"))
vectorizer <- vocab_vectorizer(vocab)
dtm_train <- create_dtm(it_train, vectorizer)
dim(dtm_train)
tfidf <- TfIdf$new()
train.data <- as.matrix(fit_transform(dtm_train, tfidf)) #### Get train data features.
data.train <- train.data
t <- 3
label <- vector("numeric", length = n) #### Save true assignments.
for(i in 1:n){
label[i] <- d[[i]][[1]]
}
k <- length(unique(label)) #### Number of clusters.
#### Train
train_label <- Train(train.data, M, k, t)
require("pacman")
pacman::p_load(text2vec, dplyr, qlcMatrix, kernlab, knitr)
source("../lib/M.R")
load("../output/CleanData.RData")
load("../output/M.RData")
source("../lib/C6_train.R")
source('../lib/evaluation_measures.R')
#### Get Features
d <- data_list[[10]]
M <- M.Matrix[[10]]
n <- length(d) #### Number of publications
paper <- vector("character", length = n)
for(i in 1:n){
paper[i] <- d[[i]][[5]]
}
it_train <- itoken(paper,
preprocessor = tolower,
tokenizer = word_tokenizer,
progressbar = FALSE)
vocab <- create_vocabulary(it_train, stopwords = c("a", "an", "the", "in", "on",
"at", "of", "above", "under"))
vectorizer <- vocab_vectorizer(vocab)
dtm_train <- create_dtm(it_train, vectorizer)
dim(dtm_train)
tfidf <- TfIdf$new()
train.data <- as.matrix(fit_transform(dtm_train, tfidf)) #### Get train data features.
data.train <- train.data
t <- 3
label <- vector("numeric", length = n) #### Save true assignments.
for(i in 1:n){
label[i] <- d[[i]][[1]]
}
k <- length(unique(label)) #### Number of clusters.
#### Train
train_label <- Train(train.data, M, k, t)
#### Result
matching_matrix_hclust <- matching_matrix(label,train_label)
performance_hclust <- performance_statistics(label,train_label)
1 * (1 == 2)
n <- nrow(data.train) #### Number of publications
f <- ncol(data.train) #### Number of features
m.matrix <- M
for(i in 1:t){
m.matrix <- m.matrix%*%M
}
m.matrix <- m.matrix[1:n, 1:n]
w <- 0.7^t
label2 <- vector("numeric", n) #### Store train_labels
label1 <- vector("numeric", n) #### For comparison
y <- matrix(0, nrow = k, ncol = f)
A <- matrix(0, nrow = f, ncol = f)
diag(A) <- rep(1,nrow(A))
D <- function(xi,xj,A){
s <- 1 - as.numeric( (t(xi) %*% A %*% xj)/ sqrt(t(xi) %*% A %*% xi)/ sqrt(t(xj) %*% A %*% xj) )
return(s)
}
Anorm <- function(xi,A){
return(sqrt(t(xi) %*% A %*% xi))
}
gradient <- function(xi,xj,A){
g <- vector("numeric", nrow(A))
for(i in 1:nrow(A)){
part1 <- xi[i]*xj[i]*Anorm(xi,A)*Anorm(xj,A)
part2 <- t(xi)%*%A%*%xj*((xi[i]^2)*(Anorm(xi,A)^2) + (xj[i]^2)*(Anorm(xj,A)^2))/2/Anorm(xi,A)/Anorm(xj,A)
part3 <- (Anorm(xi,A)^2)*(Anorm(xj,A)^2)
g[i] <- (part1 - part2)/part3
}
return(g)
}
while(length(table(label2)) != k){
label2 <- sample(1:k, n, replace =  TRUE)
}
for(i in 1:k){
if(sum(label2 == i) > 1){
y[i,] <- apply(data.train[(label2 == i),], 2, sum)/sum(label2 == i)
}
else if(sum(label2 == i) == 1){
y[i,] <- data.train[(label2 == i),]
}
else{
y[i,] <- rep(0,p)
}
}
diag(A) <- rep(1,nrow(A))
label1 <- label2
for(i in 1:n){
iter.value <- rep(0,k)
for(j in 1:k){
label2[i] <- j
fobj <- 0
for(l in 1:n){
fobj <- fobj + D(data.train[i,],data.train[l,],A)*(label2[i]!=label2[l])*w*(m.matrix[i,l] >0)
}
iter.value[j] <- fobj + D(data.train[i,],y[j,],A)
}
label2[i] <- which.min(iter.value)
}
for(i in 1:k){
if(sum(label2 == i) > 1){
y[i,] <- apply(data.train[(label2 == i),], 2, sum)/sum(label2 == i)
}
if(sum(label2 == i) == 1){
y[i,] <- data.train[(label2 == i),]
}
if(sum(label2 == i) == 0){
y[i,] <- rep(0,f)
}
}
delta <- rep(0,f)
part1 <- matrix(nrow = n, ncol = f)
for(i in 1:n){
if(sum(label2 == label2[i]) > 1){
xa <- apply(data.train[label2 == label2[i], ], 2, sum)
}
if(sum(label2 == label2[i]) == 1){
xa <- data.train[label2 == label2[i], ]
}
if(sum(label2 == label2[i]) == 0){
xa <- rep(0,f)
}
part1[i,] <- gradient(data.train[i,], y[label2[i],]*sqrt(t(xa) %*% A %*% xa), A)
}
View(y)
part1 <- colSums(part1)
part2 <- rep(0,f)
for(i in 1:n){
for(j in 1:n){
if(m.matrix[i,j]>0 & label2[i] != label2[j]){
part2 <- part2 + gradient(data.train[i,], data.train[j,], A)
}
}
}
delta <- part1 + part2
for(i in 1:f){
A[i,i] <- A[i,i] + 0.5*delta[i]
}
sum(label1 != label2)
label1 <- label2
for(i in 1:n){
iter.value <- rep(0,k)
for(j in 1:k){
label2[i] <- j
fobj <- 0
for(l in 1:n){
fobj <- fobj + D(data.train[i,],data.train[l,],A)*(label2[i]!=label2[l])*w*(m.matrix[i,l] >0)
}
iter.value[j] <- fobj + D(data.train[i,],y[j,],A)
}
label2[i] <- which.min(iter.value)
}
label2
i <- 1
j <- 1
iter.value <- rep(0,k)
label2[i] <- j
fobj <- 0
for(l in 1:n){
fobj <- fobj + D(data.train[i,],data.train[l,],A)*(label2[i]!=label2[l])*w*(m.matrix[i,l] >0)
}
warnings()
View(A)
diag(A)
sqrt(-2)
diag(A) <- rep(1, f)
for(i in 1:f){
A[i,i] <- A[i,i] + 0.01*delta[i]
}
diag(A)
sum(label1 != label2)
for(i in 1:n){
iter.value <- rep(0,k)
for(j in 1:k){
label2[i] <- j
fobj <- 0
for(l in 1:n){
fobj <- fobj + D(data.train[i,],data.train[l,],A)*(label2[i]!=label2[l])*w*(m.matrix[i,l] >0)
}
iter.value[j] <- fobj + D(data.train[i,],y[j,],A)
}
label2[i] <- which.min(iter.value)
}
diag(A)
sum(data.train <0)
sum(diag(A) <0)
diag(A) <- rep(1,f)
diag(A)
for(i in 1:f){
A[i,i] <- A[i,i] + 0.005*delta[i]
}
sum(diag(A) <0)
for(i in 1:n){
iter.value <- rep(0,k)
for(j in 1:k){
label2[i] <- j
fobj <- 0
for(l in 1:n){
fobj <- fobj + D(data.train[i,],data.train[l,],A)*(label2[i]!=label2[l])*w*(m.matrix[i,l] >0)
}
iter.value[j] <- fobj + D(data.train[i,],y[j,],A)
}
label2[i] <- which.min(iter.value)
}
part1 <- colSums(part1)
for(i in 1:k){
if(sum(label2 == i) > 1){
y[i,] <- apply(data.train[(label2 == i),], 2, sum)/sum(label2 == i)
}
if(sum(label2 == i) == 1){
y[i,] <- data.train[(label2 == i),]
}
if(sum(label2 == i) == 0){
y[i,] <- rep(0,f)
}
}
delta <- rep(0,f)
part1 <- matrix(nrow = n, ncol = f)
for(i in 1:n){
if(sum(label2 == label2[i]) > 1){
xa <- apply(data.train[label2 == label2[i], ], 2, sum)
}
if(sum(label2 == label2[i]) == 1){
xa <- data.train[label2 == label2[i], ]
}
if(sum(label2 == label2[i]) == 0){
xa <- rep(0,f)
}
part1[i,] <- gradient(data.train[i,], y[label2[i],]*sqrt(t(xa) %*% A %*% xa), A)
}
part1 <- colSums(part1)
part2 <- rep(0,f)
for(i in 1:n){
for(j in 1:n){
if(m.matrix[i,j]>0 & label2[i] != label2[j]){
part2 <- part2 + gradient(data.train[i,], data.train[j,], A)
}
}
}
delta <- part1 + part2
for(i in 1:f){
A[i,i] <- A[i,i] + 0.005*delta[i]
}
sum(label1 != label2)
require("pacman")
pacman::p_load(text2vec, dplyr, qlcMatrix, kernlab, knitr)
source("../lib/M.R")
load("../output/CleanData.RData")
load("../output/M.RData")
source("../lib/C6_train.R")
source('../lib/evaluation_measures.R')
#### Get Features
d <- data_list[[10]]
M <- M.Matrix[[10]]
n <- length(d) #### Number of publications
paper <- vector("character", length = n)
for(i in 1:n){
paper[i] <- d[[i]][[5]]
}
it_train <- itoken(paper,
preprocessor = tolower,
tokenizer = word_tokenizer,
progressbar = FALSE)
vocab <- create_vocabulary(it_train, stopwords = c("a", "an", "the", "in", "on",
"at", "of", "above", "under"))
vectorizer <- vocab_vectorizer(vocab)
dtm_train <- create_dtm(it_train, vectorizer)
dim(dtm_train)
tfidf <- TfIdf$new()
train.data <- as.matrix(fit_transform(dtm_train, tfidf)) #### Get train data features.
data.train <- train.data
t <- 3
label <- vector("numeric", length = n) #### Save true assignments.
for(i in 1:n){
label[i] <- d[[i]][[1]]
}
k <- length(unique(label)) #### Number of clusters.
#### Train
train_label <- Train(train.data, M, k, t)
#### Result
matching_matrix_hclust <- matching_matrix(label,train_label)
performance_hclust <- performance_statistics(label,train_label)
matching_matrix_c6 <- matching_matrix(label,train_label)
performance_c6 <- performance_statistics(matching_matrix_c6)
performance_c6$precision
performance_c6$accuracy
performance_c6
require("pacman")
pacman::p_load(text2vec, dplyr, qlcMatrix, kernlab, knitr)
source("../lib/M.R")
load("../output/CleanData.RData")
load("../output/M.RData")
source("../lib/C6_train.R")
source('../lib/evaluation_measures.R')
#### Get Features
d <- data_list[[10]]
M <- M.Matrix[[10]]
n <- length(d) #### Number of publications
paper <- vector("character", length = n)
for(i in 1:n){
paper[i] <- d[[i]][[5]]
}
it_train <- itoken(paper,
preprocessor = tolower,
tokenizer = word_tokenizer,
progressbar = FALSE)
vocab <- create_vocabulary(it_train, stopwords = c("a", "an", "the", "in", "on",
"at", "of", "above", "under"))
vectorizer <- vocab_vectorizer(vocab)
dtm_train <- create_dtm(it_train, vectorizer)
dim(dtm_train)
tfidf <- TfIdf$new()
train.data <- as.matrix(fit_transform(dtm_train, tfidf)) #### Get train data features.
data.train <- train.data
t <- 3
label <- vector("numeric", length = n) #### Save true assignments.
for(i in 1:n){
label[i] <- d[[i]][[1]]
}
k <- length(unique(label)) #### Number of clusters.
#### Train
train_label <- Train(train.data, M, k, t)
#### Result
matching_matrix_c6 <- matching_matrix(label,train_label)
performance_c6 <- performance_statistics(matching_matrix_c6)
performance_c6$precision
require("pacman")
pacman::p_load(text2vec, dplyr, qlcMatrix, kernlab, knitr)
source("../lib/M.R")
load("../output/CleanData.RData")
load("../output/M.RData")
source("../lib/C6_train.R")
source('../lib/evaluation_measures.R')
#### Get Features
d <- data_list[[10]]
M <- M.Matrix[[10]]
n <- length(d) #### Number of publications
paper <- vector("character", length = n)
for(i in 1:n){
paper[i] <- d[[i]][[5]]
}
it_train <- itoken(paper,
preprocessor = tolower,
tokenizer = word_tokenizer,
progressbar = FALSE)
vocab <- create_vocabulary(it_train, stopwords = c("a", "an", "the", "in", "on",
"at", "of", "above", "under"))
vectorizer <- vocab_vectorizer(vocab)
dtm_train <- create_dtm(it_train, vectorizer)
dim(dtm_train)
tfidf <- TfIdf$new()
train.data <- as.matrix(fit_transform(dtm_train, tfidf)) #### Get train data features.
data.train <- train.data
t <- 3
label <- vector("numeric", length = n) #### Save true assignments.
for(i in 1:n){
label[i] <- d[[i]][[1]]
}
k <- length(unique(label)) #### Number of clusters.
#### Train
train_label <- Train(train.data, M, k, t)
#### Result
matching_matrix_c6 <- matching_matrix(label,train_label)
performance_c6 <- performance_statistics(matching_matrix_c6)
performance_c6
require("pacman")
pacman::p_load(text2vec, dplyr, qlcMatrix, kernlab, knitr)
source("../lib/M.R")
load("../output/CleanData.RData")
load("../output/M.RData")
source("../lib/C6_train.R")
source('../lib/evaluation_measures.R')
#### Get Features
d <- data_list[[10]]
M <- M.Matrix[[10]]
n <- length(d) #### Number of publications
paper <- vector("character", length = n)
for(i in 1:n){
paper[i] <- d[[i]][[5]]
}
it_train <- itoken(paper,
preprocessor = tolower,
tokenizer = word_tokenizer,
progressbar = FALSE)
vocab <- create_vocabulary(it_train, stopwords = c("a", "an", "the", "in", "on",
"at", "of", "above", "under"))
vectorizer <- vocab_vectorizer(vocab)
dtm_train <- create_dtm(it_train, vectorizer)
dim(dtm_train)
tfidf <- TfIdf$new()
train.data <- as.matrix(fit_transform(dtm_train, tfidf)) #### Get train data features.
data.train <- train.data
t <- 3
label <- vector("numeric", length = n) #### Save true assignments.
for(i in 1:n){
label[i] <- d[[i]][[1]]
}
k <- length(unique(label)) #### Number of clusters.
#### Train
train_label <- Train(train.data, M, k, t)
#### Result
matching_matrix_c6 <- matching_matrix(label,train_label)
performance_c6 <- performance_statistics(matching_matrix_c6)
performance_c6
require("pacman")
pacman::p_load(text2vec, dplyr, qlcMatrix, kernlab, knitr)
source("../lib/M.R")
load("../output/CleanData.RData")
load("../output/M.RData")
source("../lib/C6_train.R")
source('../lib/evaluation_measures.R')
#### Get Features
d <- data_list[[10]]
M <- M.Matrix[[10]]
n <- length(d) #### Number of publications
paper <- vector("character", length = n)
for(i in 1:n){
paper[i] <- d[[i]][[5]]
}
it_train <- itoken(paper,
preprocessor = tolower,
tokenizer = word_tokenizer,
progressbar = FALSE)
vocab <- create_vocabulary(it_train, stopwords = c("a", "an", "the", "in", "on",
"at", "of", "above", "under"))
vectorizer <- vocab_vectorizer(vocab)
dtm_train <- create_dtm(it_train, vectorizer)
dim(dtm_train)
tfidf <- TfIdf$new()
train.data <- as.matrix(fit_transform(dtm_train, tfidf)) #### Get train data features.
data.train <- train.data
t <- 3
label <- vector("numeric", length = n) #### Save true assignments.
for(i in 1:n){
label[i] <- d[[i]][[1]]
}
k <- length(unique(label)) #### Number of clusters.
#### Train
train_label <- Train(train.data, M, k, t)
#### Result
matching_matrix_c6 <- matching_matrix(label,train_label)
performance_c6 <- performance_statistics(matching_matrix_c6)
performance_c6
