order(table(originalID),decreasing = TRUE)
names(sort(table(AKumar$AuthorID)
,decreasing = TRUE))
table(AKumar$AuthorID)
AKumar$AuthorID
originalID
class(originalID)
as.numeric(orginalID)
as.numeric(originalID)
order(tableas.numeric(originalID))
order(table(as.numeric(originalID)))
order(table(originalID))
originalID <- as.numeric(mapvalues(AKumar$AuthorID,names(sort(table(AKumar$AuthorID),decreasing = TRUE)),c(1:14)))
estimateID <- mapvalues(group.14,order(table(group.14),decreasing = TRUE),c(1:14))
order(table(originalID))
order(table(estimateID))
table(originalID)
sum(originalID==estimateID)
n
a<-0
b<-0
c<-0
d<-0
for(i in 1:n){
for(j in c(1:n)[-i]){
if(AKumar$AuthorID[i]==AKumar$AuthorID[j]&group.14[i]==group.14[j]) a<-a+1
if(AKumar$AuthorID[i]!=AKumar$AuthorID[j]&group.14[i]==group.14[j]) b<-b+1
if(AKumar$AuthorID[i]==AKumar$AuthorID[j]&group.14[i]!=group.14[j]) c<-c+1
if(AKumar$AuthorID[i]!=AKumar$AuthorID[j]&group.14[i]!=group.14[j]) d<-d+1
}
}
a
d
n*(n-1)/2
a<-0
b<-0
c<-0
d<-0
for(i in 1:n){
for(j in (i+1):n){
if(AKumar$AuthorID[i]==AKumar$AuthorID[j]&group.14[i]==group.14[j]) a<-a+1
if(AKumar$AuthorID[i]!=AKumar$AuthorID[j]&group.14[i]==group.14[j]) b<-b+1
if(AKumar$AuthorID[i]==AKumar$AuthorID[j]&group.14[i]!=group.14[j]) c<-c+1
if(AKumar$AuthorID[i]!=AKumar$AuthorID[j]&group.14[i]!=group.14[j]) d<-d+1
}
}
a<-0
b<-0
c<-0
d<-0
for(i in 1:(n-1)){
for(j in (i+1):n){
if(AKumar$AuthorID[i]==AKumar$AuthorID[j]&group.14[i]==group.14[j]) a<-a+1
if(AKumar$AuthorID[i]!=AKumar$AuthorID[j]&group.14[i]==group.14[j]) b<-b+1
if(AKumar$AuthorID[i]==AKumar$AuthorID[j]&group.14[i]!=group.14[j]) c<-c+1
if(AKumar$AuthorID[i]!=AKumar$AuthorID[j]&group.14[i]!=group.14[j]) d<-d+1
}
}
n*(n-1)/2
a+b+c+d
a/(a+b)
a+d
a+d/(a+b+c+d)
(a+d)/(a+b+c+d)
precision <- a/(a+b)
recall <- a/(a+c)
2*precition*recall/(precision+recall)
2*precision*recall/(precision+recall)
recall
precision
matching_matrix <- function(G,M){
n <- length(G)
result_matrix <- matrix(rep(0,4),ncol=2,nrow=2)
for(i in 1:(n-1)){
for(j in (i+1):n){
if(G[i]==G[j]&M[i]==M[j]) result_matrix[1,1]<-result_matrix[1,1]+1
if(G[i]!=G[j]&M[i]==M[j]) result_matrix[1,2]<-result_matrix[1,2]+1
if(G[i]==G[j]&M[i]!=M[j]) result_matrix[2,1]<-result_matrix[2,1]+1
if(G[i]!=G[j]&M[i]!=M[j]) result_matrix[2,2]<-result_matrix[2,2]+1
}
}
return(result_matrix)
}
result_matrix <- matching_matrix(AKumar$AuthorID,group.14)
result_matrix
(761+20383)/n
n
nrow(dtm_train)
(761+20383)/(n*(n-1)/2)
sum(result_matrix)
n*(n-1)/2
length(unique(AKumar$AuthorID))
result_hclust <- cutree(h,length(unique(AKumar$AuthorID)))
table(result_hclust)
matching_matrix_hclust <- matching_matrix(AKumar$AuthorID,result_hclust)
performance_hclust <- performance_statistics(matching_matrix_hclust)
performance_statistics <- function(result_matrix){
precision <- result_matrix[1,1]/(result_matrix[1,1]+result_matrix[1,2])
recall <- result_matrix[1,1]/(result_matrix[1,1]+result_matrix[2,1])
f1 <- 2*precision*recall/(precision+recall)
accuracy <- (result_matrix[1,1]+result_matrix[2,2])/sum(result_matrix)
}
performance_hclust <- performance_statistics(matching_matrix_hclust)
performance_hclust
performance_statistics <- function(result_matrix){
precision <- result_matrix[1,1]/(result_matrix[1,1]+result_matrix[1,2])
recall <- result_matrix[1,1]/(result_matrix[1,1]+result_matrix[2,1])
f1 <- 2*precision*recall/(precision+recall)
accuracy <- (result_matrix[1,1]+result_matrix[2,2])/sum(result_matrix)
return(list(precision=precision, recall=recall, f1=f1, accuracy=accuracy))
}
performance_hclust <- performance_statistics(matching_matrix_hclust)
performance_hclust
setwd("./Project4_WhoIsWho")
setwd("~/Dropbox/Project4_WhoIsWho")
setwd("~/Dropbox/Project4_WhoIsWho")
AKumar <- data.frame(scan("~/Dropbox/Project4_WhoIsWho/data/nameset/AKumar.txt",
what = list(Coauthor = "", Paper = "", Journal = ""), sep=">", quiet=TRUE),stringsAsFactors=FALSE)
source('~/Dropbox/Project4_WhoIsWho/lib/evaluation_measures.R')
vocab <- create_vocabulary(it_train)
vocab
vectorizer <- vocab_vectorizer(vocab)
dtm_train <- create_dtm(it_train, vectorizer)
dim(dtm_train)
tfidf <- TfIdf$new()
dtm_train_tfidf <- fit_transform(dtm_train, tfidf)
n <- nrow(dtm_train)
cmb <- expand.grid(i=1:n, j=1:n)
docsdissim <- as.dist(matrix(apply(cmb,1,cos.sim),n,n))
rownames(docsdissim) <- c(1:n)
colnames(docsdissim) <- c(1:n)
h <- hclust(docsdissim, method = "ward.D")
n
dim(docsdissim)
h <- hclust(docsdissim, method = "ward.D")
plot(h, labels = c(1:n), sub = "")
result_hclust <- cutree(h,length(unique(AKumar$AuthorID)))
length(unique(AKumar$AuthorID))
unique(AKumar$AuthorID)
setwd("~/Dropbox/Project4_WhoIsWho/doc")
AKumar <- data.frame(scan("~/Dropbox/Project4_WhoIsWho/data/nameset/AKumar.txt",
what = list(Coauthor = "", Paper = "", Journal = ""),
sep=">", quiet=TRUE),stringsAsFactors=FALSE)
# This need to be modified for different name set
# extract canonical author id befor "_"
AKumar$AuthorID <- sub("_.*","",AKumar$Coauthor)
# extract paper number under same author between "_" and first whitespace
AKumar$PaperNO <- sub(".*_(\\w*)\\s.*", "\\1", AKumar$Coauthor)
# delete "<" in AKumar$Coauthor, you may need to further process the coauthor
# term depending on the method you are using
AKumar$Coauthor <- gsub("<","",sub("^.*?\\s","", AKumar$Coauthor))
# delete "<" in AKumar$Paper
AKumar$Paper <- gsub("<","",AKumar$Paper)
# add PaperID for furthur use, you may want to combine all the nameset files and
# then assign the unique ID for all the citations
AKumar$PaperID <- rownames(AKumar)
it_train <- itoken(AKumar$Paper,
preprocessor = tolower,
tokenizer = word_tokenizer,
ids = AKumar$PaperID,
# turn off progressbar because it won't look nice in rmd
progressbar = FALSE)
vocab <- create_vocabulary(it_train)
vocab
vectorizer <- vocab_vectorizer(vocab)
dtm_train <- create_dtm(it_train, vectorizer)
dim(dtm_train)
tfidf <- TfIdf$new()
dtm_train_tfidf <- fit_transform(dtm_train, tfidf)
cos.sim <- function(ix)
{
A = dtm_train[ix[1],]
B = dtm_train[ix[2],]
return( sum(A*B)/sqrt(sum(A^2)*sum(B^2)) )
}
n <- nrow(dtm_train)
cmb <- expand.grid(i=1:n, j=1:n)
docsdissim <- as.dist(matrix(apply(cmb,1,cos.sim),n,n))
rownames(docsdissim) <- c(1:n)
h <- hclust(docsdissim, method = "ward.D")
plot(h, labels = c(1:n), sub = "")
result_hclust <- cutree(h,length(unique(AKumar$AuthorID)))
table(result_hclust)
matching_matrix_hclust <- matching_matrix(AKumar$AuthorID,result_hclust)
performance_hclust <- performance_statistics(matching_matrix_hclust)
performance_hclust
vocab <- create_vocabulary(it_train, stopwords = c("a", "the", "in", "on", "at", "above", "under"))
vocab
vocab <- prune_vocabulary(vocab,
term_count_min = 1
doc_proportion_max = 0.95,
doc_proportion_min = 0.001)
vocab <- prune_vocabulary(vocab,
term_count_min = 1,
doc_proportion_max = 0.95,
doc_proportion_min = 0.001)
vocab
26+14+61+15+100+16+12+31+10+13+13+12+86+71
577+244+800+368+1417+112+171+927+280+153+259+412+1458+1264
dtm_train_tfidf[1:10,1:10]
dtm_train_tfidf[10:20,10:20]
dtm_train_tfidf[1:20,10:20]
dtm_train[1:20,10:20]
cos.sim <- function(ix)
{
A = dtm_train_tfidf[ix[1],]
B = dtm_train_tfidf[ix[2],]
return( sum(A*B)/sqrt(sum(A^2)*sum(B^2)) )
}
n <- nrow(dtm_train)
cmb <- expand.grid(i=1:n, j=1:n)
docsdissim <- as.dist(matrix(apply(cmb,1,cos.sim),n,n))
h <- hclust(docsdissim, method = "ward.D")
plot(h, labels = c(1:n), sub = "")
result_hclust <- cutree(h,length(unique(AKumar$AuthorID)))
table(result_hclust)
source('~/Dropbox/Project4_WhoIsWho/lib/evaluation_measures.R')
matching_matrix_hclust <- matching_matrix(AKumar$AuthorID,result_hclust)
performance_hclust <- performance_statistics(matching_matrix_hclust)
performance_hclust
View(AKumar)
my.data
data(UScitiesD)
mds2 <- -cmdscale(UScitiesD)
plot(mds2, type="n", axes=FALSE, ann=FALSE)
text(mds2, labels=rownames(mds2), xpd = NA)
UScitiesD
hcity.D  <- hclust(UScitiesD, "ward.D") # "wrong"
hcity.D2 <- hclust(UScitiesD, "ward.D2")
opar <- par(mfrow = c(1, 2))
plot(hcity.D,  hang=-1)
plot(hcity.D2, hang=-1)
require(graphics)
USArrests
dist(USArrests)
dist(USArrests)[1,1]
class(dist(USArrests))
?dist
as.matrix(dist(USArrests))[1,2]
USArrests[1,]
USArrests[2,]
dist(USArrests[1,],USArrests[2,])
USArrests[1,]%*%USArrests[2,]
t(USArrests[1,])%*%USArrests[2,]
t(as.vector(USArrests[1,]))%*%as.vector(USArrests[2,])
class(USArrests[2,])
as.vector(USArrests[2,])
USArrests[1,]
10*13.2+263*236+48*58+44.5*21.2
sqrt(65927.4)
as.matrix(dist(USArrests))[1,1]
3.2^2+27^2+100+(44.5-21.2)^2
sqrt(1382.13)
pacman::p_load(text2vec, dplyr, qlcMatrix)
dim(cosSparse(dtm_train_tfidf))
n
dim(dtm_train_tfidf)
class(dtm_train_tfidf)
dim(cosSparse(t(dtm_train_tfidf)))
nrow(dtm_train_tfidf)
docsdissim <- cosSparse(t(dtm_train_tfidf))
rownames(docsdissim) <- c(1:nrow(dtm_train_tfidf))
colnames(docsdissim) <- c(1:nrow(dtm_train_tfidf))
#compute pairwise cosine similarities between citations, using cosSparse function in package
h <- hclust(as.dist(docsdissim), method = "ward")
h <- hclust(as.dist(docsdissim), method = "ward.D")
result_hclust <- cutree(h,length(unique(AKumar$AuthorID)))
table(result_hclust)
matching_matrix_hclust <- matching_matrix(AKumar$AuthorID,result_hclust)
performance_hclust <- performance_statistics(matching_matrix_hclust)
performance_hclust
result_hclust <- specc(dtm_train_tfidf, centers=length(unique(AKumar$AuthorID)))
pacman::p_load(text2vec, dplyr, qlcMatrix, kernlab)
result_hclust <- specc(dtm_train_tfidf, centers=length(unique(AKumar$AuthorID)))
result_hclust <- specc(as.matrix(dtm_train_tfidf), centers=length(unique(AKumar$AuthorID)))
```
result_hclust <- specc(as.matrix(dtm_train_tfidf), centers=length(unique(AKumar$AuthorID)))
result_sclust <- specc(as.matrix(dtm_train_tfidf), centers=length(unique(AKumar$AuthorID)))
table(result_sclust)
matching_matrix_sclust <- matching_matrix(AKumar$AuthorID,result_sclust)
performance_sclust <- performance_statistics(matching_matrix_sclust)
performance_sclust
performance_hclust
?table
start.time <- Sys.time()
result_sclust <- specc(as.matrix(dtm_train_tfidf), centers=length(unique(AKumar$AuthorID)))
end.time <- Sys.time()
time_sclust <- end.time - start.time
time_sclust
start.time <- Sys.time()
docsdissim <- cosSparse(t(dtm_train_tfidf))
rownames(docsdissim) <- c(1:nrow(dtm_train_tfidf))
colnames(docsdissim) <- c(1:nrow(dtm_train_tfidf))
#compute pairwise cosine similarities between citations, using cosSparse function in package
h <- hclust(as.dist(docsdissim), method = "ward.D")
result_hclust <- cutree(h,length(unique(AKumar$AuthorID)))
end.time <- Sys.time()
time_hclust <- end.time - start.time
time_hclust
performance_sclust
source('~/Dropbox/Project4_WhoIsWho/lib/evaluation_measures.R')
matching_matrix_hclust <- matching_matrix(AKumar$AuthorID,result_hclust)
performance_hclust <- performance_statistics(matching_matrix_hclust)
matching_matrix_sclust <- matching_matrix(AKumar$AuthorID,result_sclust)
performance_sclust <- performance_statistics(matching_matrix_sclust)
compare_df <- data.frame(method=c(sClust,hClust),
precision=c(performance_sclust$precision, performance_hclust$precision),
recall=c(performance_sclust$recall, performance_hclust$recall),
f1=c(performance_sclust$f1, performance_hclust$f1),
accuracy=c(performance_sclust$accuracy, performance_hclust$accuracy),
time=c(time_sclust,time_hclust))
kable(compare_df,caption="Comparision of performance for two clustering methods",digits = 2)
pacman::p_load(text2vec, dplyr, qlcMatrix, kernlab, knitr)
matching_matrix_hclust <- matching_matrix(AKumar$AuthorID,result_hclust)
performance_hclust <- performance_statistics(matching_matrix_hclust)
matching_matrix_sclust <- matching_matrix(AKumar$AuthorID,result_sclust)
performance_sclust <- performance_statistics(matching_matrix_sclust)
compare_df <- data.frame(method=c("sClust","hClust"),
precision=c(performance_sclust$precision, performance_hclust$precision),
recall=c(performance_sclust$recall, performance_hclust$recall),
f1=c(performance_sclust$f1, performance_hclust$f1),
accuracy=c(performance_sclust$accuracy, performance_hclust$accuracy),
time=c(time_sclust,time_hclust))
kable(compare_df,caption="Comparision of performance for two clustering methods",digits = 2)
end.time - start.time
AKumar <- data.frame(scan("../data/nameset/AKumar.txt",
what = list(Coauthor = "", Paper = "", Journal = ""),
sep=">", quiet=TRUE),stringsAsFactors=FALSE)
View(AKumar)
AKumar$AuthorID <- sub("_.*","",AKumar$Coauthor)
View(AKumar)
AKumar$PaperNO <- sub(".*_(\\w*)\\s.*", "\\1", AKumar$Coauthor)
AKumar$Coauthor <- gsub("<","",sub("^.*?\\s","", AKumar$Coauthor))
View(AKumar)
author <- "AKumar"
Author <- "AKumar"
AKumar <- data.frame(scan("../data/nameset/AKumar.txt",
what = list(Coauthor = "", Paper = "", Journal = ""),
sep=">", quiet=TRUE),stringsAsFactors=FALSE)
AKumar$AuthorID <- sub("_.*","",AKumar$Coauthor)
AKumar$PaperNO <- sub(".*_(\\w*)\\s.*", "\\1", AKumar$Coauthor)
AKumar$Coauthor <- gsub("<","",sub("^.*?\\s","", AKumar$Coauthor))
AKumar$Paper <- gsub("<","",AKumar$Paper)
Author <- "AKumar"
D <- data.frame(scan(paste("../data/nameset/", Author, ".txt", sep = ""),
what = list(Coauthor = "", Paper = "", Journal = ""),
sep=">", quiet=TRUE),stringsAsFactors=FALSE)
D$AuthorID <- sub("_.*","",D$Coauthor)
D$PaperNO <- sub(".*_(\\w*)\\s.*", "\\1", D$Coauthor)
D$Coauthor <- gsub("<","",sub("^.*?\\s","", D$Coauthor))
D$Paper <- gsub("<","",D$Paper)
D$PaperID <- rownames(D)
View(D)
Author <- "AKumar"
D <- data.frame(scan(paste("../data/nameset/", Author, ".txt", sep = ""),
what = list(Coauthor = "", Paper = "", Journal = ""),
sep=">", quiet=TRUE),stringsAsFactors=FALSE)
D$AuthorID <- sub("_.*","",D$Coauthor)
D$PaperNO <- sub(".*_(\\w*)\\s.*", "\\1", D$Coauthor)
D$Coauthor <- gsub("<","",sub("^.*?\\s","", D$Coauthor))
D$Paper <- gsub("<","",D$Paper)
D$PaperID <- rownames(D)
library(stringr)
data.lib="../data/nameset"
data.files=list.files(path=data.lib, "*.txt")
data.files
query.list=substring(data.files,
1, nchar(data.files)-4)
query.list
query.list=paste(substring(query.list, 1, 1),
" ",
substring(query.list,
2, nchar(query.list)),
sep=""
)
query.list
f.line.proc=function(lin, nam.query="."){
# remove unwanted characters
char_notallowed <- "\\@#$%^&?" # characters to be removed
lin.str=str_replace(lin, char_notallowed, "")
# get author id
lin.str=strsplit(lin.str, "_")[[1]]
author_id=as.numeric(lin.str[1])
# get paper id
lin.str=lin.str[2]
paper_id=strsplit(lin.str, " ")[[1]][1]
lin.str=substring(lin.str, nchar(paper_id)+1, nchar(lin.str))
paper_id=as.numeric(paper_id)
# get coauthor list
lin.str=strsplit(lin.str, "<>")[[1]]
coauthor_list=strsplit(lin.str[1], ";")[[1]]
#print(lin.str)
for(j in 1:length(coauthor_list)){
if(nchar(coauthor_list[j])>0){
nam = strsplit(coauthor_list[j], " ")[[1]]
if(nchar(nam[1])>0){
first.ini=substring(nam[1], 1, 1)
}else{
first.ini=substring(nam[2], 1, 1)
}
}
last.name=nam[length(nam)]
nam.str = paste(first.ini, last.name)
coauthor_list[j]=nam.str
}
match_ind = charmatch(nam.query, coauthor_list, nomatch=-1)
#print(nam.query)
#print(coauthor_list)
#print(match_ind)
if(match_ind>0){
coauthor_list=coauthor_list[-match_ind]
}
paper_title=lin.str[2]
journal_name=lin.str[3]
list(author_id,
paper_id,
coauthor_list,
paper_title,
journal_name)
}
data_list=list(1:length(data.files))
for(i in 1:length(data.files)){
## Step 0 scan in one line at a time.
dat=as.list(readLines(paste(data.lib, data.files[i], sep="/")))
data_list[[i]]=lapply(dat, f.line.proc, nam.query=query.list[i])
}
dat
data_list$
data_list
d1 <- data_list[[1]]
d1[[1]]
d1[[1]]
d1[[1]][[1]]
length(d1)
d1[[3]]
data.files
names(data_list)
names(data_list) <- data.files
query.list
names(data_list) <- query.list
save(data_list, file=paste0("../output/CleanData.RData"))
d1 <- data_list[[1]]
n <- length(d1)
d1[[1]]
P <- matrix( rep(0, n*n), nrow = n)
diag(P) <- rep(1,n)
View(P)
d1[[1]][[3]]
merge(d1[[1]][[3]], d1[[1]][[3]])
d <- data_list[[1]]
n <- length(d)
P <- matrix( rep(0, n*n), nrow = n)
diag(P) <- rep(1,n)
co <- "Start"
for(i in 1:n){
co <- cbind(co, d[[i]][[3]])
}
co <- "Start"
cbind(co,d[[1]][[3]])
co <- "Start"
co <- "Start"
rbind(co,d[[1]][[3]])
co <- matrix(c("Start", "Start"), nrow = 1)
cbind(co,d[[1]][[3]])
co <- NA
c(co,d[[1]][[3]])
co <- NULL
c(co,d[[1]][[3]])
co <- NULL
for(i in 1:n){
co <- c(co, d[[i]][[3]])
}
length(co)
unique(co)
co <- unique(co)
m <- length(co)
AP <- matrix(rep(0,n*m), nrow = n)
s <- d1[[1]][[3]]
s
co[1]
c <- co[1]
c %in% s
co <- unique(co)
m <- length(co)
AP <- matrix(rep(0,n*m), nrow = n)
for(i in 1:m){
for( j in 1:n){
if(co[i] %in% d[[j]][[3]]){
AP[j,i] <- 1
}
}
}
View(AP)
dim(AP)
co <- unique(co)
m <- length(co)
AA <- matrix(rep(0, m*m), nrow = m)
for(i in 1:m){
for(j in 1:m){
for(k in 1:n){
if(co[i] %in% d[[k]][[3]] & co[j] %in% d[[k]][[3]]){
AA[i,j] <- 1
break
}
}
}
}
M1 <- cbind(P, AP)
M2 <- cbind(t(AP), AA)
M <- rbind(M1,M2)
dim(M)
View(M)
