l1 <- vector("numeric", n) #### For comparison
l2 <- vector("numeric", n)
sum(m == 0)
244*244
y <- list(length = k)
?list
y <- list()
a <- c(1,2,3)
b <- c(4,5,6)
mean(a,b)
sum(a,b)
y <- matrix(NA, nrow = k, ncol = ncol(d))
d <- data_list[[2]]
M <- M.Matrix[[2]]
n <- length(d) #### Number of publications
paper <- vector("character", length = n)
for(i in 1:n){
paper[i] <- d[[i]][[5]]
}
it_train <- itoken(paper,
preprocessor = tolower,
tokenizer = word_tokenizer,
progressbar = FALSE)
vocab <- create_vocabulary(it_train, stopwords = c("a", "an", "the", "in", "on",
"at", "of", "above", "under"))
vectorizer <- vocab_vectorizer(vocab)
dtm_train <- create_dtm(it_train, vectorizer)
dim(dtm_train)
tfidf <- TfIdf$new()
train.data <- as.matrix(fit_transform(dtm_train, tfidf)) #### Get train data features.
label <- vector("numeric", length = n) #### Save true assignments.
for(i in 1:n){
label[i] <- d[[i]][[1]]
}
k <- length(unique(label)) #### Number of clusters.
d <- train.data
n <- nrow(d) #### Number of publications
m <- M
t <-3
m <- M
for(i in 1:t){
m <- m%*%M
}
m <- m[1:n, 1:n]
l <- vector("numeric", n) #### Store train_labels
l1 <- vector("numeric", n) #### For comparison
l2 <- vector("numeric", n)
y <- matrix(NA, nrow = k, ncol = ncol(d))
q <- d[1:3,]
apply(sum,q,2)
?apply
apply
apply(q,sum,2)
apply(q,2,sum)
q <- apply(q,2,sum)
dim(q)
length(q)
A <- matrix(NA, nrow = ncol(d), ncol = ncol(d))
diag(A) <- rep(1,nrow(A))
View(A)
A <- matrix(0, nrow = ncol(d), ncol = ncol(d))
View(A)
y <- matrix(0, nrow = k, ncol = ncol(d))
A <- matrix(0, nrow = ncol(d), ncol = ncol(d))
diag(A) <- rep(1,nrow(A))
D <- function(a,b,C){
s <- 1-(t(a) %*% C %*% b)/ sqrt(t(a) %*% C %*% a)/ sqrt(t(b) %*% C %*% b)
return(s)
}
c <- matrix(rep(0,4))
a <- c(1,2)
diag(c) <- c(2,2)
c
c <- matrix(rep(0,4), nrow = 2)
diag(c) <- c(2,2)
t(a) %*% c %*% a
t(a) %*% c %*% a /5
1- t(a) %*% c %*% a /5
c <- 0.7^t
n <- nrow(d) #### Number of publications
m.matrix <- M
for(i in 1:t){
m.matrix <- m.matrix%*%M
}
m.matrix <- m.matrix[1:n, 1:n]
c <- 0.7^t
label <- vector("numeric", n) #### Store train_labels
label1 <- vector("numeric", n) #### For comparison
label2 <- vector("numeric", n)
y <- matrix(0, nrow = k, ncol = ncol(d))
A <- matrix(0, nrow = ncol(d), ncol = ncol(d))
diag(A) <- rep(1,nrow(A))
D <- function(a,b,C){
s <- 1 - as.numeric( (t(a) %*% C %*% b)/ sqrt(t(a) %*% C %*% a)/ sqrt(t(b) %*% C %*% b) )
return(s)
}
for(i in 1:k){
y[i,] <- apply(d[(label2 == i),], 2, sum)
}
require("pacman")
pacman::p_load(text2vec, dplyr, qlcMatrix, kernlab, knitr)
source("../lib/M.R")
load("../output/CleanData.RData")
load("../output/M.RData")
d <- data_list[[2]]
M <- M.Matrix[[2]]
n <- length(d) #### Number of publications
paper <- vector("character", length = n)
for(i in 1:n){
paper[i] <- d[[i]][[5]]
}
it_train <- itoken(paper,
preprocessor = tolower,
tokenizer = word_tokenizer,
progressbar = FALSE)
vocab <- create_vocabulary(it_train, stopwords = c("a", "an", "the", "in", "on",
"at", "of", "above", "under"))
vectorizer <- vocab_vectorizer(vocab)
dtm_train <- create_dtm(it_train, vectorizer)
dim(dtm_train)
tfidf <- TfIdf$new()
train.data <- as.matrix(fit_transform(dtm_train, tfidf)) #### Get train data features.
label <- vector("numeric", length = n) #### Save true assignments.
for(i in 1:n){
label[i] <- d[[i]][[1]]
}
k <- length(unique(label)) #### Number of clusters.
d <- train.data
n <- nrow(d) #### Number of publications
m.matrix <- M
for(i in 1:t){
m.matrix <- m.matrix%*%M
}
t <- 3
for(i in 1:t){
m.matrix <- m.matrix%*%M
}
m.matrix <- m.matrix[1:n, 1:n]
w <- 0.7^t
label2 <- vector("numeric", n) #### Store train_labels
label1 <- vector("numeric", n) #### For comparison
y <- matrix(0, nrow = k, ncol = ncol(d))
A <- matrix(0, nrow = ncol(d), ncol = ncol(d))
diag(A) <- rep(1,nrow(A))
D <- function(a,b,C){
s <- 1 - as.numeric( (t(a) %*% C %*% b)/ sqrt(t(a) %*% C %*% a)/ sqrt(t(b) %*% C %*% b) )
return(s)
}
for(i in 1:k){
y[i,] <- apply(d[(label2 == i),], 2, sum)/sum(label2 == i)
}
diag(A) <- rep(1,nrow(A))
require("pacman")
pacman::p_load(text2vec, dplyr, qlcMatrix, kernlab, knitr)
source("../lib/M.R")
load("../output/CleanData.RData")
load("../output/M.RData")
d <- data_list[[2]]
M <- M.Matrix[[2]]
n <- length(d) #### Number of publications
paper <- vector("character", length = n)
for(i in 1:n){
paper[i] <- d[[i]][[5]]
}
it_train <- itoken(paper,
preprocessor = tolower,
tokenizer = word_tokenizer,
progressbar = FALSE)
vocab <- create_vocabulary(it_train, stopwords = c("a", "an", "the", "in", "on",
"at", "of", "above", "under"))
vectorizer <- vocab_vectorizer(vocab)
dtm_train <- create_dtm(it_train, vectorizer)
dim(dtm_train)
tfidf <- TfIdf$new()
d <- train.data
train.data <- as.matrix(fit_transform(dtm_train, tfidf)) #### Get train data features.
d <- train.data
t <- 3
label <- vector("numeric", length = n) #### Save true assignments.
for(i in 1:n){
label[i] <- d[[i]][[1]]
}
k <- length(unique(label)) #### Number of clusters.
n <- nrow(data.train) #### Number of publications
m.matrix <- M
for(i in 1:t){
m.matrix <- m.matrix%*%M
}
m.matrix <- m.matrix[1:n, 1:n]
w <- 0.7^t
label2 <- vector("numeric", n) #### Store train_labels
label1 <- vector("numeric", n) #### For comparison
y <- matrix(0, nrow = k, ncol = ncol(data.train))
n <- nrow(data.train) #### Number of publications
d <- data.train
data.train <- train.data
n <- nrow(data.train) #### Number of publications
m.matrix <- M
for(i in 1:t){
m.matrix <- m.matrix%*%M
}
m.matrix <- m.matrix[1:n, 1:n]
w <- 0.7^t
label2 <- vector("numeric", n) #### Store train_labels
label1 <- vector("numeric", n) #### For comparison
y <- matrix(0, nrow = k, ncol = ncol(data.train))
A <- matrix(0, nrow = ncol(data.train), ncol = ncol(data.train))
diag(A) <- rep(1,nrow(A))
D <- function(xi,xj,A){
s <- 1 - as.numeric( (t(xi) %*% A %*% xj)/ sqrt(t(xi) %*% A %*% xi)/ sqrt(t(xj) %*% A %*% xj) )
return(s)
}
label2 <- sample(1:k, n)
label2 <- sample(1:k, n, replace =  TRUE)
table(label2)
t <- 3
label <- vector("numeric", length = n) #### Save true assignments.
for(i in 1:n){
label[i] <- d[[i]][[1]]
}
k <- length(unique(label)) #### Number of clusters.
```{r}
require("pacman")
pacman::p_load(text2vec, dplyr, qlcMatrix, kernlab, knitr)
source("../lib/M.R")
load("../output/CleanData.RData")
load("../output/M.RData")
d <- data_list[[2]]
M <- M.Matrix[[2]]
n <- length(d) #### Number of publications
paper <- vector("character", length = n)
for(i in 1:n){
paper[i] <- d[[i]][[5]]
}
it_train <- itoken(paper,
preprocessor = tolower,
tokenizer = word_tokenizer,
progressbar = FALSE)
vocab <- create_vocabulary(it_train, stopwords = c("a", "an", "the", "in", "on",
"at", "of", "above", "under"))
vectorizer <- vocab_vectorizer(vocab)
dtm_train <- create_dtm(it_train, vectorizer)
dim(dtm_train)
tfidf <- TfIdf$new()
train.data <- as.matrix(fit_transform(dtm_train, tfidf)) #### Get train data features.
t <- 3
label <- vector("numeric", length = n) #### Save true assignments.
for(i in 1:n){
label[i] <- d[[i]][[1]]
}
k <- length(unique(label)) #### Number of clusters.
data.train <- train.data
n <- nrow(data.train) #### Number of publications
m.matrix <- M
for(i in 1:t){
m.matrix <- m.matrix%*%M
}
m.matrix <- m.matrix[1:n, 1:n]
w <- 0.7^t
label2 <- vector("numeric", n) #### Store train_labels
label1 <- vector("numeric", n) #### For comparison
y <- matrix(0, nrow = k, ncol = ncol(data.train))
A <- matrix(0, nrow = ncol(data.train), ncol = ncol(data.train))
diag(A) <- rep(1,nrow(A))
D <- function(xi,xj,A){
s <- 1 - as.numeric( (t(xi) %*% A %*% xj)/ sqrt(t(xi) %*% A %*% xi)/ sqrt(t(xj) %*% A %*% xj) )
return(s)
}
label2 <- sample(1:k, n, replace =  TRUE)
table(label2)
for(i in 1:k){
y[i,] <- apply(data.train[(label2 == i),], 2, sum)/sum(label2 == i)
}
diag(A) <- rep(1,nrow(A))
while(label2 != label1){
label1 <- label2
#### E step
for(i in 1:n){
iter.value <- vector("numeric", k)
for(j in 1:k){
label2[i] <- j
fobj <- 0
for(l in 1:n){
fobj <- fobj + D(data.train[i,],data.train[l,],A)*(l[i]!=l[l])*w*m.matrix[i,l]
}
iter.value[j] <- fobj + D(x[i,],y[j,],A)
}
label2[i] <- which.min(iter.value)
}
#### M step
#### Update y
for(i in 1:k){
y[i,] <- apply(data.train[(label2 == i),], 2, sum)/sum(label2 == i)
}
#### Update A matrix
for(i in 1:nrow(A)){
}
}
while(label2 != label1){
label1 <- label2
#### E step
for(i in 1:n){
iter.value <- vector("numeric", k)
for(j in 1:k){
label2[i] <- j
fobj <- 0
for(l in 1:n){
fobj <- fobj + D(data.train[i,],data.train[l,],A)*(l[i]!=l[l])*w*m.matrix[i,l]
}
iter.value[j] <- fobj + D(data.train[i,],y[j,],A)
}
label2[i] <- which.min(iter.value)
}
#### M step
#### Update y
for(i in 1:k){
y[i,] <- apply(data.train[(label2 == i),], 2, sum)/sum(label2 == i)
}
#### Update A matrix
for(i in 1:nrow(A)){
}
}
while(identical(label1,label2) == FALSE){
label1 <- label2
#### E step
for(i in 1:n){
iter.value <- vector("numeric", k)
for(j in 1:k){
label2[i] <- j
fobj <- 0
for(l in 1:n){
fobj <- fobj + D(data.train[i,],data.train[l,],A)*(l[i]!=l[l])*w*m.matrix[i,l]
}
iter.value[j] <- fobj + D(data.train[i,],y[j,],A)
}
label2[i] <- which.min(iter.value)
}
#### M step
#### Update y
for(i in 1:k){
y[i,] <- apply(data.train[(label2 == i),], 2, sum)/sum(label2 == i)
}
#### Update A matrix
for(i in 1:nrow(A)){
}
}
for(i in 1:n){
iter.value <- vector("numeric", k)
for(j in 1:k){
label2[i] <- j
fobj <- 0
for(l in 1:n){
fobj <- fobj + D(data.train[i,],data.train[l,],A)*(l[i]!=l[l])*w*m.matrix[i,l]
}
iter.value[j] <- fobj + D(data.train[i,],y[j,],A)
}
label2[i] <- which.min(iter.value)
}
label1 <- vector("numeric", n) #### For comparison
i <- 1
iter.value <- vector("numeric", k)
j <- 1
label2[i] <- j
fobj <- 0
View(m.matrix)
fobj <- 0
for(l in 1:n){
fobj <- fobj + D(data.train[i,],data.train[l,],A)*(label2[i]!=label2[l])*w*(m.matrix[i,l] >0)
}
iter.value[j] <- fobj + D(data.train[i,],y[j,],A)
for(i in 1:n){
iter.value <- vector("numeric", k)
for(j in 1:k){
label2[i] <- j
fobj <- 0
for(l in 1:n){
fobj <- fobj + D(data.train[i,],data.train[l,],A)*(label2[i]!=label2[l])*w*(m.matrix[i,l] >0)
}
iter.value[j] <- fobj + D(data.train[i,],y[j,],A)
}
label2[i] <- which.min(iter.value)
}
i <- 1
iter.value <- vector("numeric", k)
label2 <- vector("numeric", n) #### Store train_labels
label1 <- vector("numeric", n) #### For comparison
label2 <- sample(1:k, n, replace =  TRUE)
label2 <- sample(1:k, n, replace =  TRUE)
table
table(label2)
identical(label1,label2)
label1 <- label2
i <- 1
iter.value <- vector("numeric", k)
for(j in 1:k){
label2[i] <- j
fobj <- 0
for(l in 1:n){
fobj <- fobj + D(data.train[i,],data.train[l,],A)*(label2[i]!=label2[l])*w*(m.matrix[i,l] >0)
}
iter.value[j] <- fobj + D(data.train[i,],y[j,],A)
}
label2[i] <- which.min(iter.value)
label2 <- vector("numeric", n) #### Store train_labels
label1 <- vector("numeric", n) #### For comparison
y <- matrix(0, nrow = k, ncol = ncol(data.train))
A <- matrix(0, nrow = ncol(data.train), ncol = ncol(data.train))
diag(A) <- rep(1,nrow(A))
D <- function(xi,xj,A){
s <- 1 - as.numeric( (t(xi) %*% A %*% xj)/ sqrt(t(xi) %*% A %*% xi)/ sqrt(t(xj) %*% A %*% xj) )
return(s)
}
label2 <- sample(1:k, n, replace =  TRUE)
for(i in 1:k){
y[i,] <- apply(data.train[(label2 == i),], 2, sum)/sum(label2 == i)
}
diag(A) <- rep(1,nrow(A))
label1 <- label2
i <- 1
iter.value <- vector("numeric", k)
for(j in 1:k){
label2[i] <- j
fobj <- 0
for(l in 1:n){
fobj <- fobj + D(data.train[i,],data.train[l,],A)*(label2[i]!=label2[l])*w*(m.matrix[i,l] >0)
}
iter.value[j] <- fobj + D(data.train[i,],y[j,],A)
}
label2[i] <- which.min(iter.value)
i <- 2
iter.value <- vector("numeric", k)
for(j in 1:k){
label2[i] <- j
fobj <- 0
for(l in 1:n){
fobj <- fobj + D(data.train[i,],data.train[l,],A)*(label2[i]!=label2[l])*w*(m.matrix[i,l] >0)
}
iter.value[j] <- fobj + D(data.train[i,],y[j,],A)
}
label2[i] <- which.min(iter.value)
for(i in 1:n){
iter.value <- vector("numeric", k)
for(j in 1:k){
label2[i] <- j
fobj <- 0
for(l in 1:n){
fobj <- fobj + D(data.train[i,],data.train[l,],A)*(label2[i]!=label2[l])*w*(m.matrix[i,l] >0)
}
iter.value[j] <- fobj + D(data.train[i,],y[j,],A)
}
label2[i] <- which.min(iter.value)
}
head(label2, 20)
head(label,20)
head(label,100:120)
label[100:120]
label2[100:120]
Train <- function(data.train, M, k, t){
#### Initialization
n <- nrow(data.train) #### Number of publications
m.matrix <- M
for(i in 1:t){
m.matrix <- m.matrix%*%M
}
m.matrix <- m.matrix[1:n, 1:n]
w <- 0.7^t
label2 <- vector("numeric", n) #### Store train_labels
label1 <- vector("numeric", n) #### For comparison
y <- matrix(0, nrow = k, ncol = ncol(data.train))
A <- matrix(0, nrow = ncol(data.train), ncol = ncol(data.train))
diag(A) <- rep(1,nrow(A))
#### D function
D <- function(xi,xj,A){
s <- 1 - as.numeric( (t(xi) %*% A %*% xj)/ sqrt(t(xi) %*% A %*% xi)/ sqrt(t(xj) %*% A %*% xj) )
return(s)
}
#### Initial assignments (l1)
label2 <- sample(1:k, n, replace =  TRUE)
#### Initialize y values
for(i in 1:k){
y[i,] <- apply(data.train[(label2 == i),], 2, sum)/sum(label2 == i)
}
#### Initialize A matirx
diag(A) <- rep(1,nrow(A))
#### Iteration functions
while(sum(label1 != label2) > n/50){
label1 <- label2
#### E step
for(i in 1:n){
iter.value <- vector("numeric", k)
for(j in 1:k){
label2[i] <- j
fobj <- 0
for(l in 1:n){
fobj <- fobj + D(data.train[i,],data.train[l,],A)*(label2[i]!=label2[l])*w*(m.matrix[i,l] >0)
}
iter.value[j] <- fobj + D(data.train[i,],y[j,],A)
}
label2[i] <- which.min(iter.value)
}
#### M step
#### Update y
for(i in 1:k){
y[i,] <- apply(data.train[(label2 == i),], 2, sum)/sum(label2 == i)
}
#### Update A matrix
for(i in 1:nrow(A)){
}
}
return(label2)
}
Train(data.train, M, k, t)
