lin.str=lin.str[2]
paper_id=strsplit(lin.str, " ")[[1]][1]
lin.str=substring(lin.str, nchar(paper_id)+1, nchar(lin.str))
paper_id=as.numeric(paper_id)
# get coauthor list
lin.str=strsplit(lin.str, "<>")[[1]]
coauthor_list=strsplit(lin.str[1], ";")[[1]]
#print(lin.str)
for(j in 1:length(coauthor_list)){
if(nchar(coauthor_list[j])>0){
nam = strsplit(coauthor_list[j], " ")[[1]]
if(nchar(nam[1])>0){
first.ini=substring(nam[1], 1, 1)
}else{
first.ini=substring(nam[2], 1, 1)
}
}
last.name=nam[length(nam)]
nam.str = paste(first.ini, last.name)
coauthor_list[j]=nam.str
}
match_ind = charmatch(nam.query, coauthor_list, nomatch=-1)
#print(nam.query)
#print(coauthor_list)
#print(match_ind)
if(match_ind>0){
coauthor_list=coauthor_list[-match_ind]
}
paper_title=lin.str[2]
journal_name=lin.str[3]
list(author_id,
paper_id,
coauthor_list,
paper_title,
journal_name)
}
data_list=list(1:length(data.files))
for(i in 1:length(data.files)){
## Step 0 scan in one line at a time.
dat=as.list(readLines(paste(data.lib, data.files[i], sep="/")))
data_list[[i]]=lapply(dat, f.line.proc, nam.query=query.list[i])
}
data_list[[1]]
summary(data_list[[1]])
data_list[[1]][[1]]
data_list[[1]][[2]]
prop.table(m, 2)
m
nb_train <- function(train_x, train_y){
d <- ncol(train_x)
id <- unique(train_y)
k <- length(id)
P_No <- NA
P_Co <- NA
co_times <- matrix(NA, nrow = k, ncol = d)
for(i in 1:k){
##
row_sum <- rowSums(train_x)
index <- train_y == id[i]
row_sum_id <- row_sum[index]
No_ind <- row_sum_id == 1
P_No[i] <- mean(No_ind)
P_Co[i] <- 1 - P_No[i]
##
train_x_id <- train_x[index,]
dimension <- ifelse(is.matrix(train_x_id), 2, 1)
if(dimension == 1){
co_times[i,] <- train_x_id
}
else if(dimension == 2){
co_times[i,] <- colSums(train_x_id)
}
}
co_times_omt<- co_times[, -d]
seen_times <- apply(co_times_omt, 1, function(x){sum(x[x >= 2])})
total_times <- rowSums(co_times_omt)
P_Seen_Co <- seen_times / total_times
P_Unseen_Co <- 1 - P_Seen_Co
##
P_A1k_Seen_Co <- prop.table(co_times_omt)
P_A1k_Unseen_Co <- 1 / (d - rowSums(co_times_omt))
##
prop <- prop.table(co_times, 2)
Prior <- prop[,d]
return(list(Prior <- Prior,
P_No = P_No,
P_Co = P_Co,
P_Seen_Co = P_Seen_Co,
P_Unseen_Co = P_Unseen_Co,
P_A1k_Seen_Co = P_A1k_Seen_Co,
P_A1k_Unseen_Co = P_A1k_Unseen_Co))
}
nb_train(train_x = train_x, train_y = train_y)
nb_train <- function(train_x, train_y){
d <- ncol(train_x)
id <- unique(train_y)
k <- length(id)
P_No <- NA
P_Co <- NA
co_times <- matrix(NA, nrow = k, ncol = d)
for(i in 1:k){
##
row_sum <- rowSums(train_x)
index <- train_y == id[i]
row_sum_id <- row_sum[index]
No_ind <- row_sum_id == 1
P_No[i] <- mean(No_ind)
P_Co[i] <- 1 - P_No[i]
##
train_x_id <- train_x[index,]
dimension <- ifelse(is.matrix(train_x_id), 2, 1)
if(dimension == 1){
co_times[i,] <- train_x_id
}
else if(dimension == 2){
co_times[i,] <- colSums(train_x_id)
}
}
co_times_omt<- co_times[, -d]
seen_times <- apply(co_times_omt, 1, function(x){sum(x[x >= 2])})
total_times <- rowSums(co_times_omt)
P_Seen_Co <- seen_times / total_times
P_Unseen_Co <- 1 - P_Seen_Co
##
P_A1k_Seen_Co <- prop.table(co_times_omt)
P_A1k_Unseen_Co <- 1 / (d - rowSums(co_times_omt))
##
prop <- prop.table(co_times, 2)
Prior <- prop[,d]
return(list(Prior = Prior,
P_No = P_No,
P_Co = P_Co,
P_Seen_Co = P_Seen_Co,
P_Unseen_Co = P_Unseen_Co,
P_A1k_Seen_Co = P_A1k_Seen_Co,
P_A1k_Unseen_Co = P_A1k_Unseen_Co))
}
nb_train(train_x = train_x, train_y = train_y)
data_list[[1]][[1]]
model <- nb_train(train_x = train_x, train_y = train_y)
model
m
n <- c(1,2)
n <- c(1,1)
m[1,]* n
m[1,] + n
n
time(n)
prod(m[1,])
length(unique(train_y))
nb_test <- function(model, test_data, n_id){
n <- dim(test_data)[1]
d <- dim(test_data)[2]
test_data_omt <- test_data[,-d]
posterior <- matrix(NA, nrow = n, ncol = n_id)
for(i in 1:n){
K <- rowSums(test_data[i,])
for(j in 1:n_id){
if(K == 1){
posterior[i,j] <- model$P_No[j]
}
}
else if(K >= 2){
nb_test <- function(model, test_data, n_id){
n <- dim(test_data)[1]
d <- dim(test_data)[2]
test_data_omt <- test_data[,-d]
posterior <- matrix(NA, nrow = n, ncol = n_id)
for(i in 1:n){
K <- rowSums(test_data[i,])
for(j in 1:n_id){
if(K == 1){
posterior[i,j] <- model$P_No[j]
}
else if(K >= 2){
name_ind <- test_data_omt[i,] == 1
P_A1_Xi[i,j] <- prod(model$P_A1k_Seen_Co[i, name_ind] * model$P_Seen_Co[j] * model$P_Co[j] +   rep(model$P_A1k_Unseen_Co[j], sum(name_ind)) * model$P_Unseen_Co[j] * model$P_Co[j])
posterior[i,j] <- prod(P_A1_Xi[i,j] * model$Prior[j])
}
}
class[i] <- which.max(posterior[i,j])
}
return(prediction = class)
}
nb_test(model = model, test_data = train_x, n_id = 9)
nb_test <- function(model, test_data, n_id){
n <- dim(test_data)[1]
d <- dim(test_data)[2]
test_data_omt <- test_data[,-d]
posterior <- matrix(NA, nrow = n, ncol = n_id)
K <- rowSums(test_data)
for(i in 1:n){
K <- K[i]
for(j in 1:n_id){
if(K == 1){
posterior[i,j] <- model$P_No[j]
}
else if(K >= 2){
name_ind <- test_data_omt[i,] == 1
P_A1_Xi[i,j] <- prod(model$P_A1k_Seen_Co[i, name_ind] * model$P_Seen_Co[j] * model$P_Co[j] +   rep(model$P_A1k_Unseen_Co[j], sum(name_ind)) * model$P_Unseen_Co[j] * model$P_Co[j])
posterior[i,j] <- prod(P_A1_Xi[i,j] * model$Prior[j])
}
}
class[i] <- which.max(posterior[i,j])
}
return(prediction = class)
}
nb_test(model = model, test_data = train_x, n_id = 9)
nb_test <- function(model, test_data, n_id){
n <- dim(test_data)[1]
d <- dim(test_data)[2]
test_data_omt <- test_data[,-d]
posterior <- matrix(NA, nrow = n, ncol = n_id)
P_A1_Xi <- matrix(NA, nrow = n, ncol = n_id)
K <- rowSums(test_data)
for(i in 1:n){
K <- K[i]
for(j in 1:n_id){
if(K == 1){
posterior[i,j] <- model$P_No[j]
}
else if(K >= 2){
name_ind <- test_data_omt[i,] == 1
P_A1_Xi[i,j] <- prod(model$P_A1k_Seen_Co[i, name_ind] * model$P_Seen_Co[j] * model$P_Co[j] +   rep(model$P_A1k_Unseen_Co[j], sum(name_ind)) * model$P_Unseen_Co[j] * model$P_Co[j])
posterior[i,j] <- prod(P_A1_Xi[i,j] * model$Prior[j])
}
}
class[i] <- which.max(posterior[i,j])
}
return(prediction = class)
}
nb_test(model = model, test_data = train_x, n_id = 9)
m
which.max(m[1,])
nb_test <- function(model, test_data, n_id){
n <- dim(test_data)[1]
d <- dim(test_data)[2]
test_data_omt <- test_data[,-d]
posterior <- matrix(NA, nrow = n, ncol = n_id)
P_A1_Xi <- matrix(NA, nrow = n, ncol = n_id)
K <- rowSums(test_data)
for(i in 1:n){
K <- K[i]
for(j in 1:n_id){
if(K == 1){
posterior[i,j] <- model$P_No[j]
}
else if(K >= 2){
name_ind <- test_data_omt[i,] == 1
P_A1_Xi[i,j] <- prod(model$P_A1k_Seen_Co[i, name_ind] * model$P_Seen_Co[j] * model$P_Co[j] +   rep(model$P_A1k_Unseen_Co[j], sum(name_ind)) * model$P_Unseen_Co[j] * model$P_Co[j])
posterior[i,j] <- prod(P_A1_Xi[i,j] * model$Prior[j])
}
}
class[i] <- which.max(posterior[i,])
}
return(prediction = class)
}
nb_test(model = model, test_data = train_x, n_id = 9)
x1 <- c(0,1,0,0,1,0)
x1
m
prop.table(m, 2)
idx <- x1 == 1
idx
nb_test <- function(model, test_data, n_id){
n <- dim(test_data)[1]
d <- dim(test_data)[2]
test_data_omt <- test_data[,-d]
posterior <- matrix(NA, nrow = n, ncol = n_id)
P_A1_Xi <- matrix(NA, nrow = n, ncol = n_id)
K <- rowSums(test_data)
for(i in 1:n){
K <- K[i]
for(j in 1:n_id){
if(K == 1){
posterior[i,j] <- model$P_No[j]
}
else if(K >= 2){
name_ind <- test_data_omt[i,] == 1
P_A1_Xi[i,j] <- prod(model$P_A1k_Seen_Co[j, name_ind] * model$P_Seen_Co[j] * model$P_Co[j] +   rep(model$P_A1k_Unseen_Co[j], sum(name_ind)) * model$P_Unseen_Co[j] * model$P_Co[j])
posterior[i,j] <- prod(P_A1_Xi[i,j] * model$Prior[j])
}
}
class[i] <- which.max(posterior[i,])
}
return(prediction = class)
}
nb_test(model = model, test_data = train_x, n_id = 9)
nb_test <- function(model, test_data, n_id){
n <- dim(test_data)[1]
d <- dim(test_data)[2]
test_data_omt <- test_data[,-d]
posterior <- matrix(NA, nrow = n, ncol = n_id)
P_A1_Xi <- matrix(NA, nrow = n, ncol = n_id)
K <- rowSums(test_data)
for(i in 1:n){
K <- K[i]
for(j in 1:n_id){
if(K == 1){
posterior[i,j] <- model$P_No[j]
}
else if(K >= 2){
name_ind <- test_data_omt[i,] == 1
P_A1_Xi[i,j] <- prod(model$P_A1k_Seen_Co[name_ind, j] * model$P_Seen_Co[j] * model$P_Co[j] +   rep(model$P_A1k_Unseen_Co[j], sum(name_ind)) * model$P_Unseen_Co[j] * model$P_Co[j])
posterior[i,j] <- prod(P_A1_Xi[i,j] * model$Prior[j])
}
}
class[i] <- which.max(posterior[i,])
}
return(prediction = class)
}
nb_test(model = model, test_data = train_x, n_id = 9)
class(model$P_A1k_Seen_Co)
ma <- model$P_A1k_Seen_Co
View(ma)
nb_test <- function(model, test_data, n_id){
n <- dim(test_data)[1]
d <- dim(test_data)[2]
test_data_omt <- test_data[,-d]
posterior <- matrix(NA, nrow = n, ncol = n_id)
P_A1_Xi <- matrix(NA, nrow = n, ncol = n_id)
K <- rowSums(test_data)
for(i in 1:n){
K <- K[i]
for(j in 1:n_id){
if(K == 1){
posterior[i,j] <- model$P_No[j]
}
else if(K >= 2){
name_ind <- test_data_omt[i,] == 1
P_A1_Xi[i,j] <- prod(model$P_A1k_Seen_Co[j, name_ind] * model$P_Seen_Co[j] * model$P_Co[j] +   rep(model$P_A1k_Unseen_Co[j], sum(name_ind)) * model$P_Unseen_Co[j] * model$P_Co[j])
posterior[i,j] <- prod(P_A1_Xi[i,j] * model$Prior[j])
}
}
class[i] <- which.max(posterior[i,])
}
return(prediction = class)
}
nb_test(model = model, test_data = train_x, n_id = 9)
View(ma)
n <- matrix(5:8, 2)
n
m
i <- m[1,] >= 1
n[1,i]
n[1,i]*2*3
n[1,i]*2*3 + n[1,i]*5*6
prod(n[1,i]*2*3 + n[1,i]*5*6)
class(model)
class(model$P_A1k_Seen_Co)
typeof(model$P_A1k_Seen_Co)
attributes(model)
typeof(model$Prior)
typeof(model$P_No)
typeof(model$P_Co)
typeof(model$P_Seen_Co)
typeof(model$P_Unseen_Co)
typeof(model$P_A1k_Unseen_Co)
which.max(m[1,])
nb_test <- function(model, test_data, n_id){
n <- dim(test_data)[1]
d <- dim(test_data)[2]
test_data_omt <- test_data[,-d]
posterior <- matrix(NA, nrow = n, ncol = n_id)
P_A1_Xi <- matrix(NA, nrow = n, ncol = n_id)
K <- rowSums(test_data)
for(i in 1:n){
K <- K[i]
for(j in 1:n_id){
if(K == 1){
posterior[i,j] <- model$P_No[j]
}
else if(K >= 2){
name_ind <- test_data_omt[i,] == 1
P_A1_Xi[i,j] <- prod(model$P_A1k_Seen_Co[j, name_ind] * model$P_Seen_Co[j] * model$P_Co[j] +   rep(model$P_A1k_Unseen_Co[j], sum(name_ind)) * model$P_Unseen_Co[j] * model$P_Co[j])
posterior[i,j] <- prod(P_A1_Xi[i,j] * model$Prior[j])
}
}
class[i] <- which.max(posterior[,j])
}
return(prediction = class)
}
nb_test(model = model, test_data = train_x, n_id = 9)
nb_train <- function(train_x, train_y){
d <- ncol(train_x)
id <- unique(train_y)
k <- length(id)
P_No <- NA
P_Co <- NA
co_times <- matrix(NA, nrow = k, ncol = d)
for(i in 1:k){
##
row_sum <- rowSums(train_x)
index <- train_y == id[i]
row_sum_id <- row_sum[index]
No_ind <- row_sum_id == 1
P_No[i] <- mean(No_ind)
P_Co[i] <- 1 - P_No[i]
##
train_x_id <- train_x[index,]
dimension <- ifelse(is.matrix(train_x_id), 2, 1)
if(dimension == 1){
co_times[i,] <- train_x_id
}
else if(dimension == 2){
co_times[i,] <- colSums(train_x_id)
}
}
co_times_omt<- co_times[, -d]
seen_times <- apply(co_times_omt, 1, function(x){sum(x[x >= 2])})
total_times <- rowSums(co_times_omt)
P_Seen_Co <- seen_times / total_times
P_Unseen_Co <- 1 - P_Seen_Co
##
P_A1k_Seen_Co <- prop.table(co_times_omt, 1)
P_A1k_Unseen_Co <- 1 / (d - rowSums(co_times_omt))
##
prop <- prop.table(co_times, 2)
Prior <- prop[,d]
return(list(Prior = Prior,
P_No = P_No,
P_Co = P_Co,
P_Seen_Co = P_Seen_Co,
P_Unseen_Co = P_Unseen_Co,
P_A1k_Seen_Co = P_A1k_Seen_Co,
P_A1k_Unseen_Co = P_A1k_Unseen_Co))
}
class(JSmith_features) <- "numeric"
train_x <- JSmith_features[,-1]
train_y <- JSmith_features[,1]
model <- nb_train(train_x = train_x, train_y = train_y)
model
nb_test <- function(model, test_data, n_id){
n <- dim(test_data)[1]
d <- dim(test_data)[2]
test_data_omt <- test_data[,-d]
posterior <- matrix(NA, nrow = n, ncol = n_id)
P_A1_Xi <- matrix(NA, nrow = n, ncol = n_id)
K <- rowSums(test_data)
for(i in 1:n){
K <- K[i]
for(j in 1:n_id){
if(K == 1){
posterior[i,j] <- model$P_No[j]
}
else if(K >= 2){
name_ind <- test_data_omt[i,] == 1
P_A1_Xi[i,j] <- prod(model$P_A1k_Seen_Co[j, name_ind] * model$P_Seen_Co[j] * model$P_Co[j] +   rep(model$P_A1k_Unseen_Co[j], sum(name_ind)) * model$P_Unseen_Co[j] * model$P_Co[j])
posterior[i,j] <- prod(P_A1_Xi[i,j] * model$Prior[j])
}
}
class[i] <- which.max(posterior[i,])
}
return(prediction = class)
}
nb_test(model = model, test_data = train_x, n_id = 9)
ma < - model$P_A1k_Seen_Co
model$P_A1k_Seen_Co
ma <- model$P_A1k_Seen_Co
View(ma)
nb_train <- function(train_x, train_y){
d <- ncol(train_x)
id <- unique(train_y)
k <- length(id)
P_No <- NA
P_Co <- NA
co_times <- matrix(NA, nrow = k, ncol = d)
for(i in 1:k){
##
row_sum <- rowSums(train_x)
index <- train_y == id[i]
row_sum_id <- row_sum[index]
No_ind <- row_sum_id == 1
P_No[i] <- mean(No_ind)
P_Co[i] <- 1 - P_No[i]
##
train_x_id <- train_x[index,]
dimension <- ifelse(is.matrix(train_x_id), 2, 1)
if(dimension == 1){
co_times[i,] <- train_x_id
}
else if(dimension == 2){
co_times[i,] <- colSums(train_x_id)
}
}
co_times_omt<- co_times[, -d]
seen_times <- apply(co_times_omt, 1, function(x){sum(x[x >= 2])})
total_times <- rowSums(co_times_omt)
P_Seen_Co <- seen_times / total_times
P_Unseen_Co <- 1 - P_Seen_Co
##
P_A1k_Seen_Co <- prop.table(co_times_omt, 1)
P_A1k_Unseen_Co <- 1 / (d - rowSums(co_times_omt))
##
prop <- prop.table(co_times, 2)
Prior <- prop[,d]
return(list(Prior = Prior,
P_No = P_No,
P_Co = P_Co,
P_Seen_Co = P_Seen_Co,
P_Unseen_Co = P_Unseen_Co,
P_A1k_Seen_Co = P_A1k_Seen_Co,
P_A1k_Unseen_Co = P_A1k_Unseen_Co,
mm = co_times_omt))
}
model <- nb_train(train_x = train_x, train_y = train_y)
model$mm
ss <- model$mm
View(ss)
y
levels(JSmith_features[,1])
unique(train_y)
