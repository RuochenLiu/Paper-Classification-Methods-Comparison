for (j in 2:length(oc)) {
sum <- sum + sum(oc[[j]])
c<-rbind(oc[j])
points(oc[[j]])
}
points(o)
View(o)
img <- thresh(img2, w=50, h=50, offset=0.05)
oc <- ocontour(bwlabel(img))
plot(oc[[1]], type='l')
o<-oc[[1]]
sum <- sum(oc[[1]])
for (j in 2:length(oc)) {
sum <- sum + sum(oc[[j]])
c<-rbind(oc[j])
}
img <- resize(img2, 128, 128)
img <- thresh(img, w=50, h=50, offset=0.05)
oc <- ocontour(bwlabel(img))
plot(oc[[1]], type='l')
o<-oc[[1]]
sum <- sum(oc[[1]])
for (j in 2:length(oc)) {
sum <- sum + sum(oc[[j]])
c<-rbind(oc[j])
}
point(o)
plot(o)
o<-oc[[1]]
sum <- sum(oc[[1]])
for (j in 2:length(oc)) {
sum <- sum + sum(oc[[j]])
o<-rbind(oc[j])
}
plot(o)
View(o)
o<-oc[[1]]
o
o<-unlist(oc[[1]])
o
o<-unlist(oc[[1]])
sum <- sum(oc[[1]])
for (j in 2:length(oc)) {
sum <- sum + sum(oc[[j]])
o<-rbind(o,oc[j])
}
View(o)
o<-unlist(oc[[1]])
sum <- sum(oc[[1]])
for (j in 2:length(oc)) {
sum <- sum + sum(oc[[j]])
o<-rbind(o,unlist(oc[j]))
}
j=2
unlist(oc[j])
oc[j]
length(unlist(oc[j]))
o<-as.data.frame(unlist(oc[[1]]))
o<-as.data.frame(unlist(oc[[1]]))
sum <- sum(oc[[1]])
for (j in 2:length(oc)) {
sum <- sum + sum(oc[[j]])
o<-rbind(o,as.data.frame(unlist(oc[j])))
}
o<-as.data.frame(unlist(oc[[1]]))
o
View(o)
j
as.data.frame(unlist(oc[j]))
as.data.frame(unlist(oc[j]), ncol=2)
oc[[3]]
oc[[4]]
oc[[5]]
oc[[6]]
oc[[7]]
as.data.frame(unlist(oc[5]), ncol=2)
as.data.frame(unlist(oc[[1]]))
o<-matrix(unlist(oc[[1]]), nrow = 2)
o
View(o)
o<-matrix(unlist(oc[[1]]), ncol = 2)
View(o)
oc[[1]]
View(o)
o<-matrix(unlist(oc[[1]]), ncol = 2)
sum <- sum(oc[[1]])
for (j in 2:length(oc)) {
sum <- sum + sum(oc[[j]])
o<-rbind(o,matrix(unlist(oc[j]), ncol=2))
}
View(o)
plot(o)
plot(oc[[1]])
o<-matrix(unlist(oc[[1]]), ncol = 2)
sum <- sum(oc[[1]])
for (j in 2:length(oc)) {
sum <- sum + sum(oc[[j]])
o<-rbind(o,matrix(unlist(oc[j]), ncol=2))
plot(oc[[j]])
}
plot(oc[[1]])
o<-matrix(unlist(oc[[1]]), ncol = 2)
sum <- sum(oc[[1]])
for (j in 2:length(oc)) {
sum <- sum + sum(oc[[j]])
o<-rbind(o,matrix(unlist(oc[j]), ncol=2))
points(oc[[j]])
}
plot(o)
range(o)
range(o[,1])
range(o[,2])
plot(matrix(unlist(oc),ncol = 2))
b <- do.call(rbind.data.frame, oc)
plot(b)
plot(oc[[1]])
for (j in 2:length(oc)) {
sum <- sum + sum(oc[[j]])
o<-rbind(o,matrix(unlist(oc[j]), ncol=2))
points(oc[[j]])
}
b <- do.call(rbind.data.frame, oc)
View(b)
img <- resize(img2, 128, 128)
img <- thresh(img, w=50, h=50, offset=0.05)
oc <- ocontour(bwlabel(img))
b <- do.call(rbind.data.frame, oc)
plot(b)
img <- resize(img2, 128, 128)
img2 <- thresh(img, w=50, h=50, offset=0.05)
oc <- ocontour(bwlabel(img))
oc2 <- ocontour(bwlabel(img2))
b <- do.call(rbind.data.frame, oc)
b2 <- do.call(rbind.data.frame, oc2)
plot(b)
plot(b2)
plot(b)
plot(b2)
?thresh
length(oc)
length(oc2)
img <- readImage(file_paths[i])
img2 <- readImage(file_paths2[i])
img <- readImage(file_paths[i])
img2 <- readImage(file_paths2[i])
img_01 <- resize(img2, 128, 128)
img_02 <- thresh(img_01, w=50, h=50, offset=0.05)
oc <- ocontour(bwlabel(img_01))
oc2 <- ocontour(bwlabel(img_02))
b <- do.call(rbind.data.frame, oc)
b2 <- do.call(rbind.data.frame, oc2)
plot(b)
plot(b2)
length(oc)
length(oc2)
n_x <- 16
n_y <- 16
x_Bin <- seq(0, 1, length.out=n_x)
y_Bin <- seq(0, 1, length.out=n_y)
freq_location <- as.data.frame(table(factor(findInterval(b2[,1], n_x), levels=1:n_x),
factor(findInterval(b2[,2], n_y), levels=1:n_y)))
freq_location
findInterval(b2[,1], n_x
)
x_Bin <- seq(0, 128, length.out=n_x)
y_Bin <- seq(0, 128, length.out=n_y)
freq_location <- as.data.frame(table(factor(findInterval(b2[,1], n_x), levels=1:n_x),
factor(findInterval(b2[,2], n_y), levels=1:n_y)))
freq_location
x_Bin
img_01 <- resize(img2, 256, 256)
img_02 <- thresh(img_01, w=50, h=50, offset=0.05)
oc2 <- ocontour(bwlabel(img_02))
sum <- 0
for (j in 1:length(oc2)) {
sum <- sum + sum(oc2[[j]])
}
b2 <- do.call(rbind.data.frame, oc2)
n_x <- 16
n_y <- 16
x_Bin <- seq(0, 128, length.out=n_x)
y_Bin <- seq(0, 128, length.out=n_y)
x_Bin
16*16
x_Bin <- seq(0, 256, length.out=n_x)
y_Bin <- seq(0, 256, length.out=n_y)
x_Bin
length.out
n_x
n_x <- 15
n_y <- 15
x_Bin <- seq(0, 256, length.out=n_x)
y_Bin <- seq(0, 256, length.out=n_y)
x_Bin
?length
length(x_Bin)
n_x <- 16
n_y <- 16
x_Bin <- seq(0, 256, length.out=n_x)
256/16
nR <- 5
rBin <- seq(0, 1, length.out=nR)
rBin
n_x <- 16
n_x
seq(0, 256, length.out=n_x)
n_x <- 17
seq(0, 256, length.out=n_x)
n_y <- 17
x_Bin <- seq(0, 256, length.out=n_x)
y_Bin <- seq(0, 256, length.out=n_y)
freq_location <- as.data.frame(table(factor(findInterval(b2[,1], x_Bin), levels=1:n_x),
factor(findInterval(b2[,2], x_Bin), levels=1:n_y)))
freq_location
n_x <- 16
n_y <- 16
x_Bin <- seq(0, 256, length.out=n_x)
y_Bin <- seq(0, 256, length.out=n_y)
freq_location <- as.data.frame(table(factor(findInterval(b2[,1], x_Bin), levels=1:n_x),
factor(findInterval(b2[,2], x_Bin), levels=1:n_y)))
freq_location
ncol(mat)
nrow(mat)
location_feature <- as.numeric(freq_location$Freq)/(ncol(b2)*nrow(b2))
location_feature
gray_feature
mat <- imageData(img)
mat2 <- imageData(img2)
n <- 128
nBin <- seq(0, 1, length.out = n)
freq_gray <- as.data.frame(table(factor(findInterval(mat, nBin), levels = 1:n)))
gray_feature <- as.numeric(freq_gray$Freq)/(ncol(mat)*nrow(mat))
gray_feature
n <- 256
nBin <- seq(0, 1, length.out = n)
freq_gray <- as.data.frame(table(factor(findInterval(mat, nBin), levels = 1:n)))
gray_feature <- as.numeric(freq_gray$Freq)/(ncol(mat)*nrow(mat))
cor(freq_gray,freq_location)
freq_gray
cor(gray_feature,location_feature)
freq_location
install.packages("momocs")
install.packages("Momocs")
install.packages("Momocs")
library(Momocs)
# install.packages(c("NLP", "tm"))
library("NLP")
library("tm")
setwd("~/Desktop/sem 2/Applied data science/Spr2017-proj4-team-14/output")
# here replace it with your own path or manually set it in RStudio
# to where this rmd file is located
source('~/Desktop/sem 2/Applied data science/Spr2017-proj4-team-14/lib/p.function.R', local = T)
attach("CleanData.RData")
source('~/Desktop/sem 2/Applied data science/Spr2017-proj4-team-14/lib/p.function.R', local = T)
attach("~/Desktop/sem 2/Applied data science/Spr2017-proj4-team-14/outputCleanData.RData")
source('~/Desktop/sem 2/Applied data science/Spr2017-proj4-team-14/lib/p.function.R', local = T)
attach("~/Desktop/sem 2/Applied data science/Spr2017-proj4-team-14/output/CleanData.RData")
AGupta <- trans.data(1)
# install.packages(c("NLP", "tm"))
library("NLP")
library("tm")
# here replace it with your own path or manually set it in RStudio
# to where this rmd file is located
index <- read.csv("random_agupta.csv")
index <- read.csv("~/Desktop/sem 2/Applied data science/Spr2017-proj4-team-14/output/random_agupta.csv")
index <- index$x
train <- df[index, ]
index <- read.csv("~/Desktop/sem 2/Applied data science/Spr2017-proj4-team-14/output/random_agupta.csv")
index <- index$x
train <- df[index, ]
index <- read.csv("~/Desktop/sem 2/Applied data science/Spr2017-proj4-team-14/output/random_agupta.csv")
index <- index$x
train <- AGupta[index, ]
test <- AGupta[-index, ]
source('~/Desktop/sem 2/Applied data science/Spr2017-proj4-team-14/lib/title.test.R', local = T)
result.class.j <- test.result(index, AGupta, "j")
acc.j <- mean(as.numeric(result.class) == test$clusterid)
source('~/Desktop/sem 2/Applied data science/Spr2017-proj4-team-14/lib/title.test.R', local = T)
result.class.j <- test.result(index, AGupta, "j")
acc.j <- mean(as.numeric(result.class.j) == test$clusterid)
time.journal <- system.time(test.result(index, AGupta, "j"))
result.class.p <- test.result(index, AGupta, "p")
acc.p <- mean(as.numeric(result.class.p) == test$clusterid)
time.paper <- system.time(test.result(index, AGupta, "p"))
source('~/Desktop/sem 2/Applied data science/Spr2017-proj4-team-14/lib/evaluation_measures.R', local = T)
source('~/Desktop/sem 2/Applied data science/Spr2017-proj4-team-14/lib/test_result.R', local = T)
# result from nanjun
result.class.c <- read.csv("coauthor_pred.csv")
result.class.c <- result.class.c$x
matching_matrix_coauthor <- matching_matrix(as.numeric(df$clusterid[-index]), result.class.c)
performance_coauthor <- performance_statistics(matching_matrix_coauthor)
matching_matrix_journal <- matching_matrix(as.numeric(df$clusterid[-index]),result.class.j)
performance_journal <- performance_statistics(matching_matrix_journal)
matching_matrix_paper <- matching_matrix(as.numeric(df$clusterid[-index]), result.class.p)
performance_paper <- performance_statistics(matching_matrix_paper)
compare_df <- data.frame(method = c("coauthor", "paper", "journal"),
precision = c(performance_coauthor$precision, performance_paper$precision, performance_journal$precision),
recall = c(performance_coauthor$recall, performance_paper$recall, performance_journal$recall),
f1 = c(performance_coauthor$f1, performance_paper$f1, performance_journal$f1),
accuracy = c(performance_coauthor$accuracy, performance_paper$accuracy, performance_journal$accuracy),
time = c(time.coauthor, time.paper[3], time.journal[3]))
source('~/Desktop/sem 2/Applied data science/Spr2017-proj4-team-14/lib/evaluation_measures.R', local = T)
source('~/Desktop/sem 2/Applied data science/Spr2017-proj4-team-14/lib/test_result.R', local = T)
# result from nanjun
result.class.c <- read.csv("coauthor_pred.csv")
result.class.c <- result.class.c$x
matching_matrix_coauthor <- matching_matrix(as.numeric(df$clusterid[-index]), result.class.c)
performance_coauthor <- performance_statistics(matching_matrix_coauthor)
matching_matrix_journal <- matching_matrix(as.numeric(df$clusterid[-index]),result.class.j)
performance_journal <- performance_statistics(matching_matrix_journal)
matching_matrix_paper <- matching_matrix(as.numeric(df$clusterid[-index]), result.class.p)
performance_paper <- performance_statistics(matching_matrix_paper)
time.coauthor <- 3.1
compare_df <- data.frame(method = c("coauthor", "paper", "journal"),
precision = c(performance_coauthor$precision, performance_paper$precision, performance_journal$precision),
recall = c(performance_coauthor$recall, performance_paper$recall, performance_journal$recall),
f1 = c(performance_coauthor$f1, performance_paper$f1, performance_journal$f1),
accuracy = c(performance_coauthor$accuracy, performance_paper$accuracy, performance_journal$accuracy),
time = c(time.coauthor, time.paper[3], time.journal[3]))
kable(compare_df,caption = "Comparision of performance for two clustering methods", digits = 2)
# install.packages(c("NLP", "tm"))
library("NLP")
library("tm")
library(knitr)
setwd("~/Desktop/sem 2/Applied data science/Spr2017-proj4-team-14")
# here replace it with your own path or manually set it in RStudio
# to where this rmd file is located
# install.packages(c("NLP", "tm"))
library("NLP")
library("tm")
library(knitr)
setwd("~/Desktop/sem 2/Applied data science/Spr2017-proj4-team-14")
# here replace it with your own path or manually set it in RStudio
# to where this rmd file is located
source('../lib/p.function.R', local = T)
source('~/Desktop/sem 2/Applied data science/Spr2017-proj4-team-14/lib/p.function.R', local = T)
attach("../output/CleanData.RData")
attach("~/Desktop/sem 2/Applied data science/Spr2017-proj4-team-14/output/CleanData.RData")
final.j <- matrix(NA, nrow = 10, ncol = 14)
for (j in 1:14) {
df <- trans.data(j)
for(i in 1:10) {
final.j[i, j] <- acc.test(df, "j")
}
}
acc.mean.j <- apply(final.j, 2, mean)
acc.sd.j <- apply(final.j, 2, sd)
accuracy_j_table <- data.frame(Name = c("AGupta","Akumar", "CCchen","DJohnson", "JLee","JMartin","JRobinson","JSmith","KTanaka","MBrown","MJones","MMiller","SLee","Ychen"),
Mean = acc.mean.j,
StdDev = acc.sd.j)
kable(accuracy_j_table, digits = 2)
kable(t(accuracy_j_table), digits = 2)
accuracy_j_table
compare_df <- data.frame(method = c("coauthor", "paper", "journal"),
precision = c(performance_coauthor$precision, performance_paper$precision, performance_journal$precision),
recall = c(performance_coauthor$recall, performance_paper$recall, performance_journal$recall),
f1 = c(performance_coauthor$f1, performance_paper$f1, performance_journal$f1),
accuracy = c(performance_coauthor$accuracy, performance_paper$accuracy, performance_journal$accuracy),
time = c(time.coauthor, time.paper[3], time.journal[3]))
kable(compare_df,caption = "Comparision of performance for two clustering methods", digits = 2)
Name <- c("AGupta", "Akumar", "CCchen", "DJohnson",  "JLee", "JMartin", "JRobinson", "JSmith", "KTanaka", "MBrown", "MJones", "MMiller", "SLee", "Ychen")
accuracy_j_table <- as.data.frame(rbind(Name, acc.mean.j, acc.sd.j))
kable(accuracy_j_table, digits = 2)
accuracy_j_table <- as.data.frame(rbind(acc.mean.j, acc.sd.j))
final.p <- matrix(NA, nrow = 10, ncol = 14)
for (j in 1:14) {
df <- trans.data(j)
for(i in 1:10) {
final.p[i, j] <- acc.test(df, "p")
}
}
for (j in 1:14) {
df <- trans.data(j)
for(i in 1:10) {
final.p[i, j] <- acc.test(df, "p")
}
}
final.p <- matrix(NA, nrow = 10, ncol = 14)
final.p <- matrix(NA, nrow = 10, ncol = 14)
for (j in 1:14) {
df <- trans.data(j)
for(i in 1:10) {
final.p[i, j] <- acc.test(df, "p")
}
}
View(final.p)
acc.mean.p <- apply(final.p, 2, mean)
final.p <- matrix(NA, nrow = 10, ncol = 14)
for (j in 1:14) {
df <- trans.data(j)
for(i in 1:10) {
final.p[i, j] <- acc.test(df, "p")
}
}
acc.mean.p <- apply(final.p, 2, mean)
acc.sd.p <- apply(final.p, 2, sd)
accuracy_p_table <- as.data.frame(rbind(acc.mean.p, acc.sd.j))
colnames(accuracy_p_table) <- Name
row.names(accuracy_p_table) <- c("Mean", "StdDev")
kable(accuracy_p_table, digits = 2)
setwd("~/Documents/Columbia/Spring 2017/ADS/Spr2017-proj4-team-14")
## Load data_list
load("../Spr2017-proj4-team-14/output/CleanData.RData")
load("../output/CleanData.RData")
load("../output/M.RData")
AGupta <- trans.data(1)
## Load data_list
load("../output/CleanData.RData")
## Load M matrix
load("../output/M.RData")
## Extract canonical author id
label <- function(data_list, num){
nameset <- data_list[[num]]
n <- length(nameset)
label <- NA
for(i in 1:n){
label[i] <- nameset[[i]][1]
}
return(unlist(label))
}
labels <- NULL
for(i in 1:14){
l <- label(data_list = data_list, num = i)
labels[[i]] <- l
}
## Extract coauthors informartion and
## combine it with canonical author id
coauthors <- NULL
for(i in 1:14){
obs <- length(data_list[[i]])
d <- ncol(M.Matrix[[i]])
labels[[i]] <- as.matrix(labels[[i]])
coauthors[[i]] <- cbind(labels[[i]],M.Matrix[[i]][1:obs, (obs+1) : d])
coauthors[[i]] <- cbind(coauthors[[i]], rep(1,obs))
}
source("../Spr2017-proj4-team-14/lib/wang_nb_train.R")
source("../lib/wang_nb_train.R")
train_1 <- read.csv("../Spr2017-proj4-team-14/output/Exp1/train_1.csv")
source("../lib/wang_nb_train.R")
train_1 <- read.csv("../output/Exp1/train_1.csv")
train_1 <- as.matrix(train_1)
model <- nb_train(train_x = train_1[,-1], train_y = train_1[,1])
model
source("../lib/wang_nb_test.R")
test_1 <- read.csv("../output/Exp1/train_1.csv")
prediction <- nb_test(model = model, test_data = test_1[,-1])
mean(test_1[,1] == prediction)
source("../lib/wang_read_files.R")
source("../lib/wang_experiments.R")
accuracy_table <- matrix(NA,2,14)
for(i in 1:14){
nameset <- read_files(i)
result <- experiment(nameset$train_files, nameset$test_files)
accuracy_table[1,i] <- result$mean
accuracy_table[2,i] <- result$StdDev
}
source("../lib/wang_read_files.R")
source("../lib/wang_experiments.R")
accuracy_table <- matrix(NA,2,14)
i=1
nameset <- read_files(i)
source("../lib/wang_read_files.R")
read_files(i)
i=1
read_files(i)
source("../lib/wang_read_files.R")
source("../lib/wang_experiments.R")
accuracy_table <- matrix(NA,2,14)
for(i in 1:14){
nameset <- read_files(i)
result <- experiment(nameset$train_files, nameset$test_files)
accuracy_table[1,i] <- result$mean
accuracy_table[2,i] <- result$StdDev
}
accuracy_table <- as.data.frame(accuracy_table)
Name <- c("AGupta", "Akumar", "CCchen", "DJohnson",  "JLee", "JMartin", "JRobinson", "JSmith", "KTanaka", "MBrown", "MJones", "MMiller", "SLee", "Ychen")
colnames(accuracy_table) <- Name
rownames(accuracy_table) <- c("Mean", "StdDev")
kable( accuracy_table, digits = 2)
source('../lib/p.function.R', local = T)
AGupta <- trans.data(1)
index <- read.csv("../output/random_agupta.csv")
index <- index$x
train <- AGupta[index, ]
test <- AGupta[-index, ]
source('../lib/title.test.R', local = T)
result.class.j <- test.result(index, AGupta, "j")
(acc.j <- mean(as.numeric(result.class.j) == test$clusterid))
time.journal <- system.time(test.result(index, AGupta, "j"))
setwd("~/Desktop/sem 2/Applied data science/Spr2017-proj4-team-14")
library(NLP)
library(tm)
library(knitr)
load("../output/CleanData.RData")
setwd("~/Desktop/sem 2/Applied data science/Spr2017-proj4-team-14")
load("../output/CleanData.RData")
setwd("~/Desktop/sem 2/Applied data science/Spr2017-proj4-team-14")
load("../output/CleanData.RData")
load("../output/M.RData")
label <- function(data_list, num){
nameset <- data_list[[num]]
n <- length(nameset)
label <- NA
for(i in 1:n){
label[i] <- nameset[[i]][1]
}
return(unlist(label))
}
load("../output/CleanData.RData")
getwd()
load("../output/CleanData.RData")
source("../lib/wang_nb_train.R")
